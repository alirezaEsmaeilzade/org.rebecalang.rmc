reactiveclass Customer(3) {
    knownrebecs {
        Agent a;
    }
    statevars {
		byte id;
		boolean ticketIssued;
    }
    Customer(byte myId) {
        id = myId;
		ticketIssued =false;
		self.try();
    }
    msgsrv try() {
		ticketIssued =false;
        a.requestTicket(self);
    }
    msgsrv ticketIssued() {
		ticketIssued = true;
		self.try() after(?(5,30));
    }
}
reactiveclass Agent(10) {
    knownrebecs {
        TicketService ts;
        Customer c1;
        Customer c2;
    }
    statevars {
    }
    Agent() {
    }
    msgsrv sib() {}
    msgsrv requestTicket(Customer cu) {
        Customer gg = cu;
        //((Agent)sender).sib();
        ts.requestTicket((Customer)sender);// deadline(24);
    }
    msgsrv ticketIssued(Customer cu) {
		cu.ticketIssued();
    }
}
reactiveclass TicketService(10) {
    knownrebecs {
        Agent a;
    }
    statevars { 
    }
    TicketService() {
    }
    msgsrv requestTicket(Customer cu) {
			int issueDelay;
			issueDelay= ?(40,10);
			delay(issueDelay);
			a.ticketIssued(cu);
    }
}
main {
    Agent a(ts, c1, c2):();
    TicketService ts(a):();
    Customer c1(a):(1);
    Customer c2(a):(2);
}