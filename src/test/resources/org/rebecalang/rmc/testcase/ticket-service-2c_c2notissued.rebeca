reactiveclass Customer(3) {
    knownrebecs {
        Agent a;
    }
    statevars {
		byte id;
		boolean ticketIssued;
    }
    Customer(byte myId) {
        id = myId;
		ticketIssued =false;
		self.try();
    }
    msgsrv try() {
		ticketIssued =false;
        a.requestTicket(id);
    }
    msgsrv ticketIssued() {
		ticketIssued = true;
		self.try() after(?(0.3:5,0.7:30));
    }
}
reactiveclass Agent(10) {
    knownrebecs {
        TicketService ts;
        Customer c1;
        Customer c2;
    }
    statevars {
    }
    Agent() {
    }
    msgsrv requestTicket(byte id) {
        ts.requestTicket(id) deadline(24);
    }
    msgsrv ticketIssued(byte id) {
        if (id == 1)
			c1.ticketIssued();
		else if (id == 2)
			c2.ticketIssued();
		}
}
reactiveclass TicketService(10) {
    knownrebecs {
        Agent a;
    }
    statevars { 
    }
    TicketService() {
    }
    msgsrv requestTicket(byte id) {
		if(id ==1){
			int issueDelay;
			issueDelay= ?(0.2:40,0.8:10);
			delay(issueDelay);
			a.ticketIssued(id);
		}
    }
}
main {
    Agent a(ts, c1, c2):();
    TicketService ts(a):();
    Customer c1(a):(1);
    Customer c2(a):(2);
}