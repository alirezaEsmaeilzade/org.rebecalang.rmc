env int DEFAULT_DEADLINE = 3;
env int QUEUE_SIZE = 5;
reactiveclass ResourceManager(9) {
	knownrebecs {
		AppMaster am1, am2, am3, am4, am5;
	}
	statevars {
		int FREE, BUSY, appMas1, appMas4, appMas5, appMas2, appMas3, mQueueMisses, mUpdateMiss, mJobComplete;
		int[5] fifoQueue;
	}
	ResourceManager() {
		FREE = 1;
		BUSY = 0;
		appMas1 = FREE;
		appMas2 = FREE;
		appMas3 = FREE;
		appMas4 = FREE;
		appMas5 = FREE;
		mQueueMisses = 0;
		mUpdateMiss = 0;
		mJobComplete = 0;
		fifoQueue[0] = DEFAULT_DEADLINE;
		fifoQueue[1] = DEFAULT_DEADLINE;
		fifoQueue[2] = DEFAULT_DEADLINE;
		fifoQueue[3] = DEFAULT_DEADLINE;
		fifoQueue[4] = DEFAULT_DEADLINE;
		self.checkQueue();
	}
	msgsrv checkQueue() {
		mQueueMisses = 0;
		mUpdateMiss = 0;
		mJobComplete = 0;
		int I = 0;
		if(appMas1 == FREE) {
			appMas1 = BUSY;
			am1.runJob(fifoQueue[0]);
			I = 0;
			while(I < QUEUE_SIZE - 1) {
				fifoQueue[I] = fifoQueue[I + 1];
				I++;
			}
			fifoQueue[QUEUE_SIZE - 1] = DEFAULT_DEADLINE;
		}
		if(appMas2 == FREE) {
			appMas2 = BUSY;
			am2.runJob(fifoQueue[0]);
			I = 0;
			while(I < QUEUE_SIZE - 1) {
				fifoQueue[I] = fifoQueue[I + 1];
				I++;
			}
			fifoQueue[QUEUE_SIZE - 1] = DEFAULT_DEADLINE;
		}
		if(appMas3 == FREE) {
			appMas3 = BUSY;
			am3.runJob(fifoQueue[0]);
			I = 0;
			while(I < QUEUE_SIZE - 1) {
				fifoQueue[I] = fifoQueue[I + 1];
				I++;
			}
			fifoQueue[QUEUE_SIZE - 1] = DEFAULT_DEADLINE;
		}
		if(appMas4 == FREE) {
			appMas4 = BUSY;
			am4.runJob(fifoQueue[0]);
			I = 0;
			while(I < QUEUE_SIZE - 1) {
				fifoQueue[I] = fifoQueue[I + 1];
				I++;
			}
			fifoQueue[QUEUE_SIZE - 1] = DEFAULT_DEADLINE;
		}
		if(appMas5 == FREE) {
			appMas5 = BUSY;
			am5.runJob(fifoQueue[0]);
			I = 0;
			while(I < QUEUE_SIZE - 1) {
				fifoQueue[I] = fifoQueue[I + 1];
				I++;
			}
			fifoQueue[QUEUE_SIZE - 1] = DEFAULT_DEADLINE;
		}
		I = 0;
		int J = 0;
		while(I < QUEUE_SIZE) {
			fifoQueue[I]--;
			if(fifoQueue[I] == 0) {
				mQueueMisses++;
				J = I;
				while(J < QUEUE_SIZE - 1) {
					fifoQueue[J] = fifoQueue[J + 1];
					J++;
				}
				fifoQueue[QUEUE_SIZE - 1] = DEFAULT_DEADLINE;
			}
			I++;
		}
		self.checkQueue() after(1);
	}
	msgsrv update(boolean deadlineMiss) {
		mQueueMisses = 0;
		mUpdateMiss = 0;
		mJobComplete = 0;
		if(deadlineMiss == true)
			mUpdateMiss = 1;
		else
			mJobComplete = 1;
		if(sender == am1)
			appMas1 = FREE;
		else if(sender == am2)
			appMas2 = FREE;
		else if(sender == am3)
			appMas3 = FREE;
		else if(sender == am4)
			appMas4 = FREE;
		else if(sender == am5)
			appMas5 = FREE;
	}
}

reactiveclass AppMaster(6) {
	knownrebecs { ResourceManager rm; }	
	msgsrv runJob(int dline) {
		int completion = ?(2, 5);
		boolean deadlineMiss;
		if(completion > dline) {
			deadlineMiss = true;
			rm.update(deadlineMiss) after(dline);
		} else {
			deadlineMiss = false;
			rm.update(deadlineMiss) after(completion);
		}
	}
}

main {
	ResourceManager rm(am1, am2, am3, am4, am5):();
	AppMaster am1(rm):();
	AppMaster am2(rm):();
	AppMaster am3(rm):();
	AppMaster am4(rm):();
	AppMaster am5(rm):();
}

