// A cluster is fully utilized.
// TODO: find a good argument for the choice of number of jobs and tasks.
// One is it has concurrency. Uber jobs only would be less load on the
// cluster because of fewer messages, no worker to appmaster messages.
// One appmaster is less load on resource manager but more load on the
// appmaster. Also, fewer states?

reactiveclass Client(10)
{
	knownrebecs
	{
		ResourceManager rm;
	}
	
	statevars
	{
	
	}
	
	Client()
	{
		self.start();
	}
	
	msgsrv start()
	{
		rm.submitApp();
		rm.submitApp();
		rm.submitApp();
		rm.submitApp();
		rm.submitApp();
		self.busy() after (1000);
	}
	
	msgsrv update()
	{
		rm.submitApp(); // Same as a resourcemanager FIFO job queue
	}

	msgsrv busy() {
		self.busy();
	}
}

reactiveclass ResourceManager(10)
{
	knownrebecs
	{
		AppMaster appMaster1;
		AppMaster appMaster2;
		AppMaster appMaster3;
		AppMaster appMaster4;
		AppMaster appMaster5;
	}
	
	statevars
	{
		int appMaster1Free;
		int appMaster2Free;
		int appMaster3Free;
		int appMaster4Free;
		int appMaster5Free;
	}
	
	ResourceManager()
	{
		appMaster1Free = 1; // 1 for free, 0 for busy
		appMaster2Free = 1;
		appMaster3Free = 1;
		appMaster4Free = 1;
		appMaster5Free = 1;
	}
	
	msgsrv submitApp()
	{
		// Find free appmaster
		if( appMaster1Free == 1 )
		{
			appMaster1Free = 0;
			appMaster1.runJob();
		}
		else if( appMaster2Free == 1 )
		{
			appMaster2Free = 0;
			appMaster2.runJob();
		}
		else if( appMaster3Free == 1 )
		{
			appMaster3Free = 0;
			appMaster3.runJob();
		}
		else if( appMaster4Free == 1 )
		{
			appMaster4Free = 0;
			appMaster4.runJob();
		}
		else if( appMaster5Free == 1 )
		{
			appMaster5Free = 0;
			appMaster5.runJob();
		}
	}
	
	msgsrv update()
	{
		if( sender == appMaster1 )
		{
			appMaster1Free = 1;
		}
		else if( sender == appMaster2 )
		{
			appMaster2Free = 1;
		}
		else if( sender == appMaster3 )
		{
			appMaster3Free = 1;
		}
		else if( sender == appMaster4 )
		{
			appMaster4Free = 1;
		}
		else if( sender == appMaster5 )
		{
			appMaster5Free = 1;
		}
	}
}

reactiveclass AppMaster(10)
{
	knownrebecs
	{
		Client client;
		ResourceManager rm;
		Node node1;
		Node node2;
		Node node3;
		Node node4;
		Node node5;
		Node node6;
		Node node7;
		Node node8;
		Node node9;
		Node node10;
		Node node11;
		Node node12;
		Node node13;
		Node node14;
		Node node15;
		Node node16;
		Node node17;
		Node node18;
		Node node19;
		Node node20;
		Node node21;
		Node node22;
		Node node23;
		Node node24;
		Node node25;
	}
	
	statevars
	{
		int myID;
		int tasksComplete;
	}
	
	AppMaster( int id )
	{
		myID = id;
		tasksComplete = 0;
	}
	
	msgsrv runJob()
	{
		//delay(?( 2, 3 ));
		if( myID == 1 )
		{
			node1.runTask() after(1);
			delay(1);
			node2.runTask() after(1);
			delay(1);
			node3.runTask() after(1);
			delay(1);
			node4.runTask() after(1);
			delay(1);
			node5.runTask() after(1);
		}
		else if( myID == 2 )
		{
			node6.runTask() after(1);
			delay(1);
			node7.runTask() after(1);
			delay(1);
			node8.runTask() after(1);
			delay(1);
			node9.runTask() after(1);
			delay(1);
			node10.runTask() after(1);
		}
		else if( myID == 3 )
		{
			node7.runTask() after(1);
			delay(1);
			node2.runTask() after(1);
			delay(1);
			node6.runTask() after(1);
			delay(1);
			node8.runTask() after(1);
			delay(1);
			node3.runTask() after(1);
		}
		else if( myID == 4 )
		{
			node6.runTask() after(1);
			delay(1);
			node2.runTask() after(1);
			delay(1);
			node10.runTask() after(1);
			delay(1);
			node1.runTask() after(1);
			delay(1);
			node4.runTask() after(1);
		}
		else if( myID == 5 )
		{
			node1.runTask() after(1);
			delay(1);
			node5.runTask() after(1);
			delay(1);
			node3.runTask() after(1);
			delay(1);
			node9.runTask() after(1);
			delay(1);
			node2.runTask() after(1);
		}
	}
	
	msgsrv update()
	{
		tasksComplete += 1;
		if( tasksComplete == 5 ) // All tasks completed
		{
			tasksComplete = 0;
			rm.update();
			delay(1);
			client.update();
		}
	}
}

reactiveclass Node(10)
{
	knownrebecs
	{
		AppMaster appMaster1;
		AppMaster appMaster2;
		AppMaster appMaster3;
		AppMaster appMaster4;
		AppMaster appMaster5;
	}
	
	statevars
	{
		int myID;
	}
	
	Node( int id )
	{
		myID = id;
	}
	
	msgsrv runTask()
	{
		if( myID == 1 || myID == 2 || myID == 3 || myID == 4 || myID == 5 )
		{
			appMaster1.update();
		}
		else if( myID == 6 || myID == 7 || myID == 8 || myID == 9 || myID == 10 )
		{
			appMaster2.update();
		}
		else if( myID == 11 || myID == 12 || myID == 13 || myID == 14 || myID == 15 )
		{
			appMaster3.update();
		}
		else if( myID == 16 || myID == 17 || myID == 18 || myID == 19 || myID == 20 )
		{
			appMaster4.update();
		}
		else if( myID == 21 || myID == 22 || myID == 23 || myID == 24 || myID == 25 )
		{
			appMaster5.update();
		}
	}
}

main
{
	Client client( rm ):();
	ResourceManager rm( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):();

	AppMaster appMaster1( client, rm, node1, node2, node3, node4, node5, node6, node7, node8, node9,
		node10, node11, node12, node13, node14, node15, node16, node17, node18, node19, node20, node21,
		node22, node23, node24, node25 ):( 1 );
	AppMaster appMaster2( client, rm, node1, node2, node3, node4, node5, node6, node7, node8, node9,
		node10, node11, node12, node13, node14, node15, node16, node17, node18, node19, node20, node21,
		node22, node23, node24, node25 ):( 2 );
	AppMaster appMaster3( client, rm, node1, node2, node3, node4, node5, node6, node7, node8, node9,
		node10, node11, node12, node13, node14, node15, node16, node17, node18, node19, node20, node21,
		node22, node23, node24, node25 ):( 3 );
	AppMaster appMaster4( client, rm, node1, node2, node3, node4, node5, node6, node7, node8, node9,
		node10, node11, node12, node13, node14, node15, node16, node17, node18, node19, node20, node21,
		node22, node23, node24, node25 ):( 4 );
	AppMaster appMaster5( client, rm, node1, node2, node3, node4, node5, node6, node7, node8, node9,
		node10, node11, node12, node13, node14, node15, node16, node17, node18, node19, node20, node21,
		node22, node23, node24, node25 ):( 5 );

	Node node1( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 1 );
	Node node2( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 2 );
	Node node3( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 3 );
	Node node4( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 4 );
	Node node5( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 5 );
	Node node6( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 6 );
	Node node7( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 7 );
	Node node8( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 8 );
	Node node9( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 9 );
	Node node10( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 10 );
	Node node11( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 11 );
	Node node12( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 12 );
	Node node13( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 13 );
	Node node14( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 14 );
	Node node15( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 15 );
	Node node16( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 16 );
	Node node17( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 17 );
	Node node18( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 18 );
	Node node19( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 19 );
	Node node20( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 20 );
	Node node21( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 21 );
	Node node22( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 22 );
	Node node23( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 23 );
	Node node24( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 24 );
	Node node25( appMaster1, appMaster2, appMaster3, appMaster4, appMaster5 ):( 25 );
}