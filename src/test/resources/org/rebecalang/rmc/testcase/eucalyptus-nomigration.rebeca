// A cloud controller provisions a random number of virtual machines (VMs)
// between 2 data center controllers (DCCs). Once both dccs have informed the
// cc of their vms, the number of concurrent users (M) changes randomly and
// provisioning takes place again. Both dccs inform each other of changes
// in their number of vms
//
// 1. Maximum number of vms is the same per dcc
// 2. Provision of a vm is atomic, takes no time
// 3. All vms are always under 100% load
// 4. All users have the same locality
// 5. All vms have the same capacity
// 6. Load balancing policy between dccs is 50/50
// 7. No failures are modeled
// 8. Provisioning is 1 vm per user
// 9. Provisioning is at least 110% vms per user and at most 120% unless there are fewer than 5 concurrent users.
// 10. Maximum number of vms per dcc is constant
// 11. If the number of concurrent users is odd, the dcc for the extra vm is chosen randomly
// 12. Maximum number of concurrent users is 10, and therefore the maximum number of vms per dcc is 6

reactiveclass CloudController(10)
{
	knownrebecs
	{
		DataCenterController dcc1;
		DataCenterController dcc2;
	}
	
	statevars
	{
		int MAX_VMS; // Maximum vms per dcc
		int replies; // The cc waits for replies from all dccs before reprovisioning
		// to avoid a queue overflow
	}
	
	CloudController()
	{
		MAX_VMS = 6;
		replies = 0;
		self.start();
	}
	
	msgsrv start()
	{
		dcc1.queryResourceAvailability();
		delay(1);
		dcc2.queryResourceAvailability();
		assertion(10==290);
	}
	
	msgsrv informResourceAvailability( int vms )
	{
		// Random number of concurrent users
		int M = ?( 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 );
		replies += 1;
		if( replies == 2 ) // All dccs have replied
		{
			replies = 0;
			M += 1; // Add 1 to provision at least 110%. Can be abstracted away.
			if( M % 2 == 1 ) // One dcc needs to provision more than the other
			{
				int dcc = ?( 1, 2 ); // pick a random one to provision more
				if( dcc == 1 )
				{
					dcc1.provision( ( M / 2 ) + 1 );
					dcc2.provision( ( M / 2 ) );
				}
				else if( dcc == 2 )
				{
					dcc1.provision( ( M / 2 ) );
					dcc2.provision( ( M / 2 ) + 1 );
				}
			}
			else // Even load on the clusters
			{
				dcc1.provision( M / 2 );
				dcc2.provision( M / 2 );
			}
		}
	}
}

reactiveclass DataCenterController(10)
{
	knownrebecs
	{
		CloudController cc;
		DataCenterController dcc1;
		DataCenterController dcc2;
	}
	
	statevars
	{
		int myID;
		int VMs;
	}
	
	DataCenterController( int id )
	{
		myID = id;
		VMs = 0;
		self.start();
	}
	
	msgsrv start()
	{
		if( myID == 1 )
		{
			dcc2.informResourceAvailability( VMs );
		}
		else if( myID == 2 )
		{
			dcc1.informResourceAvailability( VMs );
		}
	}
	
	msgsrv informResourceAvailability( int vms )
	{
		// Not used, no migration being modeled
	}
	
	msgsrv queryResourceAvailability()
	{
		cc.informResourceAvailability( VMs );
	}
	
	msgsrv provision( int provisions )
	{
		VMs = provisions;
		cc.informResourceAvailability( VMs );
		if( myID == 1 )
		{
			dcc2.informResourceAvailability( VMs );
		}
		else if( myID == 2 )
		{
			dcc1.informResourceAvailability( VMs );
		}
	}	
}

main
{
	CloudController cc( dcc1, dcc2 ):();
	DataCenterController dcc1( cc, dcc1, dcc2 ):( 1 );
	DataCenterController dcc2( cc, dcc1, dcc2 ):( 2 );
}