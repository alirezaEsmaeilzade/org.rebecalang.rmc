
reactiveclass Philosopher(3)
{
	knownrebecs
	{
		Fork forkL, forkR;
	}
	statevars
	{
		//int[3] a;
		boolean eating, fL, fR;//, g1, g12, g13, g14, g15, g16, g17, g18;
		//boolean[7] v2;
		//int ff;
		//boolean fg;
		//boolean[2] v;
	}
	
	Philosopher() {
		self.initial();
	}
	
	//msgsrv tt(int y, boolean j) {}
	msgsrv initial()
	{
		fL = false;
		fR = false;
		eating = false;
		self.arrive();
	}

	msgsrv arrive()
	{
		forkL.request();
	}

	msgsrv permit()
	{
		if (sender == forkL) { /* moshkel: chand ta permit posht sare ham*/
			if (!fL) {
				fL = true;
				forkR.request();
			}
		}
		else {
			if (fL && !(fR)) { /*fL: added by amin moshkel in bood ke changAl samte chapo dast nagerefteh*/
				fR = true;/*!(fR): age chand ta permit posh sare ham biad*/
				self.eat();
			}
			/* else discard the message */
		}
	}

	msgsrv eat()
	{
		eating = true;
		self.leave();
	}

	msgsrv leave()
	{
		//int afd = ?(1, 4, 5, 7);
		fL = false;
		fR = false;
		eating = false;
		forkL.release();
		//boolean r = ?(false, true);
		forkR.release();
		self.arrive();
		assertion(10==100);
	}
}

reactiveclass Fork(3)
{
	knownrebecs
	{
		Philosopher philL;
		Philosopher philR;
	}
	statevars
	{
		boolean lAssign;	
		boolean rAssign;	
		boolean leftReq;
		boolean rightReq;
	}
	Fork() {
		//self.initial();
	}
	
	msgsrv initial()
	{ 
		lAssign = false;
		rAssign = false;
		leftReq = false;
		rightReq = false;
	}

	msgsrv request()
	{
		if (sender == philL) {
			if (!leftReq) {
				leftReq = true;
				if (!rAssign) {
					lAssign = true;
					philL.permit();
				}
			} 
			/* else discard message */
		}
		else {
			if (!rightReq) {
				rightReq = true;
				if (!lAssign) {
					rAssign = true;
					philR.permit();
				}
			}
			/* else discard message */
		}
	}
	msgsrv release()
	{
		if (sender == philL && lAssign){
			leftReq = false;
			lAssign = false;
			if (rightReq) {
				rAssign=true;
				philR.permit();
			}
		}
		if (sender == philR && rAssign){
			rAssign = false;
			rightReq = false;
			/* <<< added by amin */
			if (leftReq) {
				lAssign=true;
				philL.permit();
			}
			/*>>*/
		}
	}
}

main
{
       Philosopher phil0(fork0, fork1):();
       Philosopher phil1(fork0, fork1):();
       // Philosopher phil2(fork1, fork2):();
       //Philosopher phil3(fork2, fork3):();

       Fork fork0(phil0, phil1):();
       Fork fork1(phil1, phil0):();
       // Fork fork2(phil2, phil0):();
       //Fork fork3(phil3, phil0):();
}
