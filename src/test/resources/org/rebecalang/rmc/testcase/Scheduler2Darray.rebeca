
env short maxTime = 380;
env short wholeCycle = 600;
env byte inBufSize = 2;
env byte gnrT = 1;
env byte routT = 2;
env byte outRT = 1;
env byte outAT = 1;
env byte inRT = 2;
env byte inAT = 1;
env byte schdT = 2;
env byte consT = 1;
env byte writeT = 4;
env byte readT = 13;

reactiveclass Manager(10){
	
	knownrebecs{
		Router r00, r10, r20, r30, r01, r11, r21, r31, r02, r12, r22, r32, r03, r13, r23, r33;
	}
	
	statevars{
	}
	
	Manager(){
		scenario1(1);	
	}
	
	msgsrv reset(){
		r23.reStart()after(wholeCycle);
	}
										//............Traffics............
	void genTraffic(byte a){
		r23.reStart()after(wholeCycle);
		r23.checkRecieved() after(maxTime);
			
		r20.inReq(0,2,3) after (10);
		r20.inReq(1,2,3) after (12);
		
		r21.inReq(0,2,2) after (36);
	}
	
	void scenario1(byte a){
		r23.reStart()after(wholeCycle);
		r11.checkRecieved() after(maxTime);
			
		r00.inReq(0,1,1) after (10);
		r00.inReq(3,1,1) after (11);
		
		r10.inReq(0,1,1) after (36);
		
	}
}

reactiveclass Router(10) {

	knownrebecs {
		Manager manager;
		Router N;  // : 0
		Router E;  // : 1
		Router S;  // : 2
		Router W;  // : 3		
	}
	
	statevars {  
		byte Xid, Yid, recieved;
		
		byte[4] inBufPtr, inBufLen, waitedOutReq;           //Pointers of each sides for output (for round robin scheduler)
		
		byte[4][2] inBufX, inBufY, inBufID;    // the size of arrays is equal with the buffersize			
		byte[4][3] outBuf, waitedInReq;
		boolean[4] inBufFull, outBufFull, outReqEnable, inReqEnable, isWaitedInReq;
		boolean [1][3][4] inm;
	}
	
	Router(byte X, byte Y){
		Xid = X;
		Yid = Y;	
		for(byte i=0;i<4;i++){		
			outReqEnable[i] = true;    // for each input port
			inReqEnable[i] = true;		// for each output port
			isWaitedInReq[i] = false;     // wating inReq for each input port. maybe false or true
			waitedOutReq[i] = 5;           // wating outReq for each input port. maybe 0, 1, 2 or 3 
			inBufFull[i] = false;		
			inBufPtr [i]= 0;  			// all selectors of RR schedulers should begin from port 0, except the o scheduler for output buffer
			inBufLen [i] = 0;
			outBufFull[i] = false;
			
			for (byte j = 0;j< 2; j++){
				inBufX [i][j] = 0; 
				inBufY [i][j] = 0;
				inBufID [i][j] = 0;
			}
			for (byte j = 0;j< 3; j++){
				waitedInReq[i][j] = 0;
				outBuf[i][j] = 0;
			}	
		}
		inBufPtr [0]= 1; 				// round robin scheduler of 0 output buffer should start from 1 (not 0)
		recieved = 0;
	}
		
	msgsrv inReq( byte inPort, byte Xtarget, byte Ytarget){
		if( inBufFull[inPort] == false ){   		
			pushBuf(true, inPort, Xtarget, Ytarget);
			sendInAck(inPort,(byte)writeT+ inAT);
		}else{
			isWaitedInReq[inPort] = true;
			waitedInReq[inPort][0] = Xtarget;						
			waitedInReq[inPort][1] = Ytarget;					
		//	waitedInReq[inPort][2] = id;
		}
		if(inBufLen[inPort] == 1){
			if(outReqEnable[inPort] == true){
				self.route(inPort, Xtarget, Ytarget)after(writeT);
				outReqEnable[inPort] = false;
			}
		}	
	}
	
	msgsrv inAck(byte outPort){			
		byte turn;
		outBufFull[outPort] = false;
		inReqEnable[outPort] = true;
		turn = RRSched(outPort);
		if(turn < 5){						
			self.outReq(outPort, turn);     
			waitedOutReq[turn] = 5;                 
		} 
	}

	msgsrv outReq(byte outPort, byte inPort){
		if( outBufFull[outPort] == false ){   		
			pushBuf(false, outPort, inBufX[inPort][0], inBufY[inPort][0]);
	
			self.outAck(inPort)after((byte) (readT+ writeT) + outAT);	       		
			
			sendInReq(outPort);						// the parameter dosn't work for now
			inReqEnable[outPort] = false;
		} else
			waitedOutReq[inPort] = outPort;		    
	}
	
	msgsrv outAck(byte inPort){					// an acknowledgment which is sent as a response of outreq of an input port of the router
		outReqEnable[inPort] = true;         	
		popBuf(inPort);
		
		if (isWaitedInReq[inPort] == true){			
			pushBuf(true, inPort,waitedInReq[inPort][0], waitedInReq[inPort][1] );	
			sendInAck(inPort,(byte)writeT+ inAT );
			isWaitedInReq[inPort] = false;	
		}
		if (inBufLen[inPort] > 0){
			self.route(inPort, inBufX[inPort][0], inBufY[inPort][0])after(writeT);		
			outReqEnable[inPort] = false;
		}
	}
	
	msgsrv consume(byte inPort){
		outReqEnable[inPort] = true;         	
		popBuf(inPort);
		
		if (isWaitedInReq[inPort] == true){			
			pushBuf(true, inPort,waitedInReq[inPort][0], waitedInReq[inPort][1]);	
			sendInAck(inPort,(byte)writeT+ inAT );
			isWaitedInReq[inPort] = false;	
		}
		if (inBufLen[inPort] > 0){
			self.route(inPort, inBufX[inPort][0], inBufY[inPort][0])after(writeT);		
			outReqEnable[inPort] = false;
		}
		recieved = (byte)recieved + 1;  
	}
	
	msgsrv route(byte inPort, byte Xtarget, byte Ytarget) {
		if(Xtarget > Xid){		// Routing Algorithm XY: first move through horisental channels 
			self.outReq(1, inPort)after(routT+ outRT);  // outReq-Transmission (1) 
		} 
		else if(Xtarget < Xid){	
			self.outReq(3, inPort)after(routT+ outRT);   // to the West
		} 
		else if(Ytarget > Yid){	
			self.outReq(2, inPort)after(routT+ outRT);   // to the South
		}
		else if(Ytarget < Yid){	
			self.outReq(0, inPort)after(routT+ outRT);   // to the North
		}
		else if((Xtarget == Xid) && (Ytarget == Yid)){ // Here is the destination of the router
			self.consume(inPort)after(routT + consT);
		}			
	}
	
//******************** functions
	
	void sendInReq(byte outPort){
		
			byte t1 = (byte)(readT+ writeT);
			t1 = (byte)(t1 + inRT);
			
			if(outPort == 0)
				N.inReq(2, outBuf[outPort][0], outBuf[outPort][1])after(t1);
			else if(outPort == 1)
				E.inReq(3, outBuf[outPort][0], outBuf[outPort][1])after(t1);
			else if(outPort == 2)
				S.inReq(0, outBuf[outPort][0], outBuf[outPort][1])after(t1);
			else if(outPort == 3)
				W.inReq(1, outBuf[outPort][0], outBuf[outPort][1])after(t1);			
	}
	
	byte RRSched(byte outPort){
		byte temp;
		byte turn = inBufPtr[outPort];
		for(byte i=0;i<4;i++){				// Choosing the next input port that can send a packet from the outPut port
			if(waitedOutReq[turn] == outPort) {
				inBufPtr[outPort] = (byte)(turn + 1) % 4;
			  	return turn;
			}
				turn = (byte)(turn + 1) % 4;
				if (turn == outPort) turn = (byte)(turn + 1) % 4;
		}
		return 5;			// turn = 5 means no one wants to go through the outport
	}
			
	void sendInAck(byte direction, byte AfTime){
		if (sender != manager){
			if(direction == 0)	N.inAck(2)after(AfTime);				// sending an acknoledgement to the neigboure router
			else if(direction == 1) E.inAck(3)after(AfTime);
			else if(direction == 2) S.inAck(0)after(AfTime);
			else if(direction == 3) W.inAck(1)after(AfTime);
		}	
	}
	
	void pushBuf(boolean isInBuf, byte direction, byte packX, byte packY){
		if(isInBuf){
			inBufX[direction][inBufLen[direction]] = packX;
			inBufY[direction][inBufLen[direction]] = packY;
		//	inBufID[direction][inBufLen[direction]] = packID;
			inBufLen[direction] = (byte)(inBufLen[direction] + 1); 		
			if(inBufLen[direction] == inBufSize) 		
				inBufFull[direction] = true;	
		}else{
			outBuf[direction][0] = packX;
			outBuf[direction][1] = packY;
		//	outBuf[direction][2] = packID;
			outBufFull[direction] = true;
		}
	}
	
	void popBuf(byte direction){
		for(byte i= 1;i<inBufLen[direction];i++){				// Shifting all elements of the buffer to one upper place
			inBufX[direction][i - 1] = inBufX[direction][i];
			inBufY[direction][i - 1] = inBufY[direction][i];
			inBufID[direction][i - 1] = inBufID[direction][i];
		}
		inBufX[direction][inBufLen[direction]-1] = 0;
		inBufY[direction][inBufLen[direction]-1] = 0;
		inBufID[direction][inBufLen[direction]-1] = 0;
		
		inBufLen[direction] = (byte)inBufLen[direction] - 1;			//updating the length of the buffer
		inBufFull[direction] = false;
	}
	
	// ********** routins for property checking ************
	
	msgsrv reStart(){
		manager.reset();
	}	
	
	msgsrv deadlineMiss(){
		delay(5);
	}
	
	msgsrv checkPoint(){
		self.deadlineMiss() after(1)deadline(3);
		self.deadlineMiss() after(1)deadline(3);
	}
	
	msgsrv checkRecieved(){
		
		if (recieved ==1){
		//	self.checkPoint();
		}
		/*if (recieved < 5 ){ 
			self.checkPoint();
		}
		else if (recieved > 3){

		}	*/
	}	
}

main {
//NoC 2*2
	/*
	Manager m(r00,r01,r10,r11):();
	Router r00(m,r01,r10,r01,r10):(0,0);
	Router r10(m,r11,r00,r11,r00):(1,0);

	Router r01(m,r00,r11,r00,r11):(0,1);
	Router r11(m,r10,r01,r10,r01):(1,1);
	*/
	
//NoC 4*4
	
	Manager m(r00,r10,r20,r30,r01,r11,r21,r31,r02,r12,r22,r32,r03,r13,r23,r33):();
	
	Router r00(m,r03,r10,r01,r30):(0,0);
	Router r10(m,r13,r20,r11,r00):(1,0);
	Router r20(m,r23,r30,r21,r10):(2,0);
	Router r30(m,r33,r00,r31,r20):(3,0);
	
	Router r01(m,r00,r11,r02,r31):(0,1);
	Router r11(m,r10,r21,r12,r01):(1,1);
	Router r21(m,r20,r31,r22,r11):(2,1);
	Router r31(m,r30,r01,r32,r21):(3,1);
	
	Router r02(m,r01,r12,r03,r32):(0,2);
	Router r12(m,r11,r22,r13,r02):(1,2);
	Router r22(m,r21,r32,r23,r12):(2,2);
	Router r32(m,r31,r02,r33,r22):(3,2);
	
	Router r03(m,r02,r13,r00,r33):(0,3);
	Router r13(m,r12,r23,r10,r03):(1,3);
	Router r23(m,r22,r33,r20,r13):(2,3);
	Router r33(m,r32,r03,r30,r23):(3,3);
	

//NoC 8* 8
/*	
	Manager m(r00,r10,r20,r30,r40,r50,r60,r70,
			  r01,r11,r21,r31,r41,r51,r61,r71,
			  r02,r12,r22,r32,r42,r52,r62,r72,
			  r03,r13,r23,r33,r43,r53,r63,r73,
			  r04,r14,r24,r34,r44,r54,r64,r74,
			  r05,r15,r25,r35,r45,r55,r65,r75,
			  r06,r16,r26,r36,r46,r56,r66,r76,
			  r07,r17,r27,r37,r47,r57,r67,r77
			  ):();
	
	Router r00(m,r07,r10,r01,r70):(0,0);
	Router r10(m,r17,r20,r11,r00):(1,0);
	Router r20(m,r27,r30,r21,r10):(2,0);
	Router r30(m,r37,r40,r31,r20):(3,0);
	Router r40(m,r47,r50,r41,r30):(4,0);
	Router r50(m,r57,r60,r51,r40):(5,0);
	Router r60(m,r67,r70,r61,r50):(6,0);
	Router r70(m,r77,r00,r71,r60):(7,0);
	
	Router r01(m,r00,r11,r02,r71):(0,1);
	Router r11(m,r10,r21,r12,r01):(1,1);
	Router r21(m,r20,r31,r22,r11):(2,1);
	Router r31(m,r30,r41,r32,r21):(3,1);
	Router r41(m,r40,r51,r42,r31):(4,1);
	Router r51(m,r50,r61,r52,r41):(5,1);
	Router r61(m,r60,r71,r62,r51):(6,1);
	Router r71(m,r70,r01,r72,r61):(7,1);
	
	Router r02(m,r01,r12,r03,r72):(0,2);
	Router r12(m,r11,r22,r13,r02):(1,2);
	Router r22(m,r21,r32,r23,r12):(2,2);
	Router r32(m,r31,r42,r33,r22):(3,2);
	Router r42(m,r41,r52,r43,r32):(4,2);
	Router r52(m,r51,r62,r53,r42):(5,2);
	Router r62(m,r61,r72,r63,r52):(6,2);
	Router r72(m,r71,r02,r73,r62):(7,2);
	
	Router r03(m,r02,r13,r04,r73):(0,3);
	Router r13(m,r12,r23,r14,r03):(1,3);
	Router r23(m,r22,r33,r24,r13):(2,3);
	Router r33(m,r32,r43,r34,r23):(3,3);
	Router r43(m,r42,r53,r44,r33):(4,3);
	Router r53(m,r52,r63,r54,r43):(5,3);
	Router r63(m,r62,r73,r64,r53):(6,3);
	Router r73(m,r72,r03,r74,r63):(7,3);

	Router r04(m,r03,r14,r05,r74):(0,4);
	Router r14(m,r13,r24,r15,r04):(1,4);
	Router r24(m,r23,r34,r25,r14):(2,4);
	Router r34(m,r33,r44,r35,r24):(3,4);
	Router r44(m,r43,r54,r45,r34):(4,4);
	Router r54(m,r53,r64,r55,r44):(5,4);
	Router r64(m,r63,r74,r65,r54):(6,4);
	Router r74(m,r73,r04,r75,r64):(7,4);
	
	Router r05(m,r04,r15,r06,r75):(0,5);
	Router r15(m,r14,r25,r16,r05):(1,5);
	Router r25(m,r24,r35,r26,r15):(2,5);
	Router r35(m,r34,r45,r36,r25):(3,5);
	Router r45(m,r44,r55,r46,r35):(4,5);
	Router r55(m,r54,r65,r56,r45):(5,5);
	Router r65(m,r64,r75,r66,r55):(6,5);
	Router r75(m,r74,r05,r76,r65):(7,5);
	
	Router r06(m,r05,r16,r07,r76):(0,6);
	Router r16(m,r15,r26,r17,r06):(1,6);
	Router r26(m,r25,r36,r27,r16):(2,6);
	Router r36(m,r35,r46,r37,r26):(3,6);
	Router r46(m,r45,r56,r47,r36):(4,6);
	Router r56(m,r55,r66,r57,r46):(5,6);
	Router r66(m,r65,r76,r67,r56):(6,6);
	Router r76(m,r75,r06,r77,r66):(7,6);
	
	Router r07(m,r06,r17,r00,r77):(0,7);
	Router r17(m,r16,r27,r10,r07):(1,7);
	Router r27(m,r26,r37,r20,r17):(2,7);
	Router r37(m,r36,r47,r30,r27):(3,7);
	Router r47(m,r46,r57,r40,r37):(4,7);
	Router r57(m,r56,r67,r50,r47):(5,7);
	Router r67(m,r66,r77,r60,r57):(6,7);
	Router r77(m,r76,r07,r70,r67):(7,7);
*/	
} 



	