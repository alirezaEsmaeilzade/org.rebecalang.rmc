env int g =10;
env int g2 =10 + g;
reactiveclass Customer(3) {
    knownrebecs {
        Agent a;
    }
    statevars {
		byte id;
    }
    Customer(byte myId) {
        id = (byte)(myId + (g - g));
		self.try();
    }
    msgsrv try() {
        //if (?(true, false))
        	a.requestTicket(id);
    }
    msgsrv ticketIssued() {
        self.try() after(30);
		//assertion(100==100);
    }
}
reactiveclass Agent(10) {
    knownrebecs {
        TicketService ts;
        Customer c1;
        Customer c2;
        /*Customer c3;
        Customer c4;
        Customer c5;
        Customer c6;
        Customer c7;
        Customer c8;*/
    }
    statevars {
    }
    Agent() {
    }
    msgsrv requestTicket(byte id) {
        ts.requestTicket(id) deadline(24);
    }
    msgsrv ticketIssued(byte id) {
        if (id == 1)
			c1.ticketIssued();
		else if (id == 2)
			c2.ticketIssued();
		/*else if (id == 3)
			c3.ticketIssued();
		else if (id == 4)
			c4.ticketIssued();
		else if (id == 5)
			c5.ticketIssued();
		else if (id == 6)
			c6.ticketIssued();
		else if (id == 7)
			c7.ticketIssued();
		else if (id == 8)
			c8.ticketIssued();*/
    }
}
reactiveclass TicketService(10) {
    knownrebecs {
        Agent a;
    }
    statevars {
        int issueDelay;
    }
    TicketService(int myIssueDelay) {
        issueDelay = myIssueDelay;
    }
    msgsrv requestTicket(byte id) {
		
        delay(issueDelay);
        a.ticketIssued(id);
    }
}
main {
    Agent a(ts, c1, c2/*, c3, c4, c5, c6, c7, c8*/):();
    TicketService ts(a):(2);
    Customer c1(a):(1);
    Customer c2(a):(2);
    /*Customer c3(a):(3);
    Customer c4(a):(4);
    Customer c5(a):(5);
    Customer c6(a):(6);
    Customer c7(a):(7);
    Customer c8(a):(8);*/
}