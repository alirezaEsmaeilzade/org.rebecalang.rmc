reactiveclass Airport(4){
	knownrebecs{
		Plane p1;
		Plane p2;
		Plane p3;
		Plane p4;	
	}
	statevars{
		int id;
		int destinationid;
		int runway;
		int criticalRigion;
		int emptyParking;
	}
	Airport(int airportid, int numberOfRunway){
		id = airportid;
		runway = numberOfRunway;
		criticalRigion = 1;
		emptyParking = 0;
		destinationid = 1 - airportid;
	}
	msgsrv watchTower(int planeid, int position){
		if(planeid == 1){
			if(position == 1){
				if(runway>0){
					runway = runway - 1;
					emptyParking = emptyParking + 1;
					p1.takeRunway();
				}else{
					p1.ready();
				}
			}
			else if(position == 2){
				//assertion(1 > 1);
				if(criticalRigion == 1){
					criticalRigion = criticalRigion -1;
					p1.takeoff();
					runway = runway + 1;
				}
				else{
					p1.wait();
				}
			}
			else if(position == 3){
				criticalRigion = criticalRigion + 1;
				p1.flying(destinationid);
			}
			else if(position == 4){
				p1.reqToLanding();
			}
			else if(position == 5){
				if(criticalRigion == 1 && runway>0 && emptyParking != 0){
					criticalRigion = criticalRigion - 1;
					runway = runway - 1;
					p1.landing();
				}else{
					p1.revolveAroundAirport();
				}
			}
			else if(position == 6){
				criticalRigion = criticalRigion + 1;
				runway = runway + 1;
				p1.goToParking();
			}
		}else if(planeid == 2){
			if(position == 1){
				if(runway>0){
					runway = runway - 1;
					emptyParking = emptyParking + 1;
					p2.takeRunway();
				}else{
					p2.ready();
				}
			}
			else if(position == 2){
				if(criticalRigion == 1){
					criticalRigion = criticalRigion -1;
					p2.takeoff();
					runway = runway + 1;
				}
				else{
					p2.wait();
				}
			}
			else if(position == 3){
				criticalRigion = criticalRigion + 1;
				p2.flying(destinationid);
			}
			else if(position == 4){
				p2.reqToLanding();
			}
			else if(position == 5){
				if(criticalRigion == 1 && runway>0 && emptyParking != 0){
					criticalRigion = criticalRigion - 1;
					runway = runway - 1;
					p2.landing();
				}else{
					p2.revolveAroundAirport();
				}
			}
			else if(position == 6){
				criticalRigion = criticalRigion + 1;
				runway = runway + 1;
				p2.goToParking();
			}
		}else if(planeid == 3){
			if(position == 1){
				if(runway>0){
					runway = runway - 1;
					emptyParking = emptyParking + 1;
					p3.takeRunway();
				}else{
					p3.ready();
				}
			}
			else if(position == 2){
				if(criticalRigion == 1){
					criticalRigion = criticalRigion -1;
					p3.takeoff();
					runway = runway + 1;
				}
				else{
					p3.wait();
				}
			}
			else if(position == 3){
				criticalRigion = criticalRigion + 1;
				p3.flying(destinationid);
			}
			else if(position == 4){
				p3.reqToLanding();
			}
			else if(position == 5){
				if(criticalRigion == 1 && runway>0 && emptyParking != 0){
					criticalRigion = criticalRigion - 1;
					runway = runway - 1;
					p3.landing();
				}else{
					p3.revolveAroundAirport();
				}
			}
			else if(position == 6){
				criticalRigion = criticalRigion + 1;
				runway = runway + 1;
				p3.goToParking();
			}
		}else if(planeid == 4){
			if(position == 1){
				if(runway>0){
					runway = runway - 1;
					emptyParking = emptyParking + 1;
					p4.takeRunway();
				}else{
					p4.ready();
				}
			}
			else if(position == 2){
				if(criticalRigion == 1){
					criticalRigion = criticalRigion -1;
					p4.takeoff();
					runway = runway + 1;
				}
				else{
					p4.wait();
				}
			}
			else if(position == 3){
				criticalRigion = criticalRigion + 1;
				p4.flying(destinationid);
			}
			else if(position == 4){
				p4.reqToLanding();
			}
			else if(position == 5){
				if(criticalRigion == 1 && runway>0 && emptyParking != 0){
					criticalRigion = criticalRigion - 1;
					runway = runway - 1;
					p4.landing();
				}else{
					p4.revolveAroundAirport();
				}
			}
			else if(position == 6){
				criticalRigion = criticalRigion + 1;
				runway = runway + 1;
				p4.goToParking();
			}
		}

	}
}
reactiveclass Plane(2){
	knownrebecs{
		Airport a0;
		Airport a1;
	}
		statevars{
		int aid;
		int pid;
		int fuel;
		int position;
		boolean notCrash;
	}
	Plane(int airportid, int planeid){
		aid = airportid;
		pid = planeid;
		fuel = 0;
		position = 0;
		notCrash = true;
		if (planeid == 1)
			self.preparation();
	}
	msgsrv talkToWatchtower(){
		if(aid == 0){
				a0.watchTower(pid,position);
		}else if(aid == 1){
				a1.watchTower(pid,position);
		}	
	}
	msgsrv preparation(){
		position = 0;
		fuel = ?(3,4,5);
		delay(3);
		self.ready();
	}
	msgsrv ready(){
		position = 1;
		self.talkToWatchtower();
	}
	msgsrv takeRunway(){
		position = 2;
		delay(1);
		self.talkToWatchtower();
	}
	msgsrv wait(){
		self.talkToWatchtower();		
	}
	msgsrv takeoff(){
		position = 3;
		self.talkToWatchtower();		
	}
	msgsrv flying(int id){
		position = 4;
		delay(5);
		fuel = fuel - 3;
		aid = id;
		self.reqToLanding();
	}
	msgsrv reqToLanding(){
		position = 5;
		self.talkToWatchtower();
	}
	msgsrv revolveAroundAirport(){
		fuel = fuel - 1;
		delay(1);
		if(fuel < 0){
			notCrash = false;
		}
		assertion(notCrash);
		self.talkToWatchtower();
	}
	msgsrv landing(){
		position = 6;
		self.talkToWatchtower();
	}
	msgsrv goToParking(){
		position = 7;
		delay(1);
		self.preparation();
	}
}
main{
	Airport a0(p1 ,p2 ,p3 ,p4):(0,2);
	Airport a1(p1 ,p2 ,p3 ,p4):(1,1);	
	Plane p1(a0 ,a1):(0,1);
	Plane p2(a0 ,a1):(0,2);
	Plane p3(a0 ,a1):(1,3);
	Plane p4(a0 ,a1):(1,4);	
	
}

