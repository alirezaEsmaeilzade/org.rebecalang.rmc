/***********
TinyOS Sensing App (worst case task lengths, distributed)
V4
Reactive classes: CPU, Sensor, Radio, Misc, TDMA
CPU handles the interrupts (events) coming from Sensor, Radio, and Misc
The interrupts come in periodically, modeled by "after" in Rebeca.
Each takes a while to handle, modeled by "delay" in Rebeca.
************/

env int samplingRate = 25;
env int numberOfNodes = 6;
env int packetSize = 4;			// number of sensor samples per packet
env int sensorTaskDelay = 2;	// worst-case length of sensor task

env int miscPeriod = 120;
env int radioTaskDelay = 7;		// worst-case length of radio task
env int miscTaskDelay = 10;		// worst-case length of misc task



reactiveclass CPU(10)
{
	knownrebecs
	{
		Radio radio;
		Sensor sensor;
	}

	statevars
	{
		int radioCounter;
    }

	CPU()
	{
		radioCounter = 0;
	}

	msgsrv sensorEvent(int period)
	{
      	self.sensorTask(period, currentMessageWaitingTime);
    }

	msgsrv sensorTask(int period, int lag)
	{
		// process sensor sample
		delay(sensorTaskDelay);

		// send a radio message every 'packetSize' samples
		radioCounter += 1;

		// check sensor deadline
		int tmp = period - lag - currentMessageWaitingTime;
		assertion(tmp >= 0);
	}

	msgsrv radioEvent(int dl)
	{
		dl = dl - currentMessageWaitingTime;
		int packetNumber;
		packetNumber = (radioCounter - (radioCounter % packetSize)) / packetSize;
		dl = dl - (radioTaskDelay * packetNumber);
		assertion(dl >= 0);
		radioCounter = radioCounter % packetSize;
		delay(radioTaskDelay * packetNumber);
	}	

	msgsrv miscEvent()
	{
		// perform misc task
		delay(miscTaskDelay);
	}

	msgsrv tdmaSlot(int slotSize)
	{
		radio.radioLoop(slotSize - currentMessageWaitingTime);
	}

	msgsrv sensorTaskDone()
	{
		// do nothing, just check the deadline
	}

	msgsrv radioTaskDone()
	{
		// do nothing, just check the deadline
	}
}

reactiveclass Sensor(10)
{
	knownrebecs
	{
		CPU cpu;
	}

	statevars
	{
	}

	Sensor()
	{
		self.sensorFirst();
	}

	msgsrv sensorFirst()
	{
		self.sensorLoop() after(?(10, 20, 30));
	}

	msgsrv sensorLoop()
	{
		int period = 1000 / samplingRate;
		cpu.sensorEvent(period);
		self.sensorLoop() after(period);
	}
}

reactiveclass Radio(10)
{
	knownrebecs
	{
		CPU cpu;
	}

	statevars
    {
    }

	Radio()
    {
    }

	msgsrv radioLoop(int dl)
	{
		int tmp = dl - currentMessageWaitingTime;
		cpu.radioEvent(tmp);
	}
}

reactiveclass Misc(10)
{
	knownrebecs
	{
		CPU cpu;
    }

	statevars
	{
	}

	Misc()
	{
		self.miscFirst();
	}

	msgsrv miscFirst()
	{
		self.miscLoop() after(?(10,20,30));
	}

	msgsrv miscLoop()
	{
		cpu.miscEvent();
		self.miscLoop() after(miscPeriod);
	}
}

reactiveclass TDMA(10)
{
	knownrebecs
	{
		CPU cpu;
    }

	statevars
	{
		int period, slotSize;
	}

	TDMA()
	{
		slotSize = ((1000 / samplingRate) * packetSize) / numberOfNodes;
		period = slotSize * numberOfNodes;
		self.tdmaFirst();
	}

	msgsrv tdmaFirst()
	{
		self.tdmaLoop() after(?(10,20,30));
	}

	msgsrv tdmaLoop()
	{
		cpu.tdmaSlot(slotSize);
		self.tdmaLoop() after(period);
	}
}

main
{
	CPU cpu (radio, sensor):();
	Sensor sensor(cpu):();
	Radio radio(cpu):();
	Misc misc(cpu):();
	TDMA tdma(cpu):();
}

