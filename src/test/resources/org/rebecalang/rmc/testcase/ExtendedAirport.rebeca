reactiveclass TowerController(5) {
	knownrebecs {
		Airplane plane1;
		Airplane plane2;
		Airplane plane3;
	}

	statevars {
		boolean isWaiting1;
		boolean isWaiting2;
		boolean isWaiting3;
		boolean runwayFree;
		byte parked;
	}

	msgsrv initial() {
		runwayFree = true; /* nobody is landing */
		isWaiting1 = false;
		isWaiting2 = false;
		isWaiting3 = false;
		parked = 0;
	}
	
	msgsrv Arrive() {
		if (runwayFree && (parked < 2))
		{
			parked = parked + 1;
		
			runwayFree = false;
			if (sender == plane1)
			{
				plane1.AllowLanding();
			}
			else if (sender == plane2)
			{
				plane2.AllowLanding();
			}
			else if (sender == plane3)
			{
				plane3.AllowLanding();
			}
		}
		else
		{
			if (sender == plane1)
			{
				isWaiting1 = true;
			}
			else if (sender == plane2)
			{
				isWaiting2 = true;
			}
			else if (sender == plane3)
			{
				isWaiting3 = true;
			}
		}
	}
	
	msgsrv Takeoff() {
		if (runwayFree) {
			parked = parked - 1;
			if (sender == plane1) {
				plane1.Liftoff();
			}
			else if (sender == plane2) {
				plane2.Liftoff();
			}
			else if (sender == plane3) {
				plane3.Liftoff();
			}	
		}
		else {  // try again soon!
			if (sender == plane1) {
				plane1.Leaving();
			}
			else if (sender == plane2) {
				plane2.Leaving();
			}
			else if (sender == plane3) {
				plane3.Leaving();
			}	
		}
	}
	
	msgsrv Park() {
		if (!isWaiting1 && !isWaiting2 && !isWaiting3)
		{
			runwayFree = true;
		}
		else if (parked < 2)
		{
			Airplane plane;
			
			if (isWaiting1) {
				plane = plane1;
			}
			else if (isWaiting2) {
				plane = plane2;
			}
			else if (isWaiting3) {
				plane = plane3;
			}
			
			if (isWaiting1) {
				plane = ?(plane, plane1);
			}
			if (isWaiting2) {
				plane = ?(plane, plane2);
			}
			if (isWaiting3) {
				plane = ?(plane, plane3);
			}
			
			runwayFree = false;
			if (plane == plane1) {
				isWaiting1 = false;
				plane1.AllowLanding();
			} else if (plane == plane2) {
				isWaiting2 = false;
				plane2.AllowLanding();
			} else if (plane == plane3) {
				isWaiting3 = false;
				plane3.AllowLanding();
			}
		}
		
	}
}

reactiveclass Airplane(3) {
	knownrebecs {
		TowerController controller;
	}

	statevars {
		boolean landing;
		boolean leaving;
	}

	msgsrv initial() {
		landing = false;
		leaving = false;
		self.Arriving();
	}

	msgsrv AllowLanding() {
		landing = true;
		self.Landed();
	}
	
	msgsrv Landed() {
		landing = false;
		controller.Park();
		self.Leaving();
	}

	msgsrv Arriving() {
		controller.Arrive();
	}
	
	msgsrv Leaving() {
		controller.Takeoff();
	}
	
	msgsrv Liftoff() {
		leaving = true;
		self.Flight();
	}
	
	msgsrv Flight() {
		leaving = false;
		self.Arriving();
	}
}

main {
	Airplane Airplane1(theController):();
	Airplane Airplane2(theController):();
	Airplane Airplane3(theController):();
	TowerController theController(Airplane1, Airplane2, Airplane3):();
}