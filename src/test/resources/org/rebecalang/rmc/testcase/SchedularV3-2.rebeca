
reactiveclass Manager(10){
	
	knownrebecs{
		Router r00, r10, r20, r30, r01, r11, r21, r31, r02, r12, r22, r32, r03, r13, r23, r33;
	}
	
	statevars{
		short wholeCycle;       // the time period for reseting the model
	}
	
	Manager(){
		wholeCycle = 600;
		self.reset()after(wholeCycle);	
	}
	
	msgsrv reset(){
		r23.init(2,3);
		
	}
}

reactiveclass Router(10) {

	knownrebecs {
		Manager manager;
		Router N;  // : 0
		Router E;  // : 1
		Router S;  // : 2
		Router W;  // : 3		
	}
	
	statevars {  
		short maxTime; 			// using for estimating the time during witch packets recieved

		byte inBufSize;
		byte Xid,Yid;
		
		byte[4] inBufPtr;           //Pointers of each sides for output (for round robin scheduler)
		
		byte[4][2] inBufX;
		byte[4][2] inBufY;		  // the size of arrays is equal with the buffersize , 			
		byte[4] inBufLen;       // Number of elements in the buffer   
		
		boolean[4] inBufFull;
		boolean[4] outBufFull;
		byte[4][2] outBuf;		// capacity 1 for each of the output buffers
		 	
		boolean [4] outReqEnable;		// for each input ports. means the port is waiting for outAck for recently sent packet, thus cannot send other packets.
		boolean [4] inReqEnable;		// for each output ports. the same usage of outReqEnables for input ports.
		boolean[4] isWaitedInReq;			// For each Input Port, shows if the neigboring router has a waited inReq request
		byte[4][2] waitedInReq;		// Shows the (X of) destination of the waited packet if "waitedIReq" is "true"
		byte [4] waitedOutReq; 			// For each inputPort, shows if it is waiting for an output port to be empty 
		//byte recieved, gnrT, routT, outRT, outAT, inAT, inRT, schdT, consT, writeT, readT;
		byte recieved;
		byte gnrT;
		byte routT;
		byte outRT;
		byte outAT;
		byte inAT;
		byte inRT;
		byte schdT;
		byte consT;
		byte writeT;
		byte readT;
	}
	
	Router(byte X, byte Y){
		gnrT = 10;
		routT = 2;
	    outRT = 1;
		outAT = 1;
		inRT = 2;
		inAT = 1;
		schdT = 2;
		consT = 19;
		writeT = 4;
		readT = 13;
		
		
		maxTime = 190;
		inBufSize = 2;
		
		Xid = X;
		Yid = Y;
			
		for(byte i=0;i<4;i++){		
			outReqEnable[i] = true;    // for each input port
			inReqEnable[i] = true;		// for each output port
			
			isWaitedInReq[i] = false;     // wating inReq for each input port. maybe false or true
			waitedOutReq[i] = 5;           // wating outReq for each input port. maybe 0, 1, 2 or 3      //**c5
			
			inBufFull[i] = false;		
			inBufPtr [i]= 0;  			// all selectors of round robin schedulers are set to begin from port 0, except the o scheduler for output buffer
			inBufLen [i] = 0;
			
			outBufFull[i] = false;
			
			for (byte j = 0;j< 2; j++){
				waitedInReq[i][j] = 0;
				outBuf[i][j] = 0;
			
			}
		}
		inBufPtr [0]= 1; 				// round robin scheduler of 0 output buffer should start from 1 (not 0)
		
		for (byte i=0;i<4;i++){
			for (byte j= 0;j<2;j++){
				inBufX [i][j] = 0; 
				inBufY [i][j] = 0;
			}
		}
		recieved = 0;
			
		//Traffic  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> should be written
		if(X == 0 && Y == 0){
			self.inReq(0,2,3) after (10);  // 10 is the producing time
		}	
	
		// destination
		
		if(X == 2 && Y == 3){
			self.caller();	
		}
	}
	
	
	msgsrv caller(){
			self.checkRecieved()after(maxTime);	
	}
	
	
	msgsrv init(byte X, byte Y){
		for(byte i=0;i<4;i++){		
			outReqEnable[i] = true;    // for each input port
			inReqEnable[i] = true;		// for each output port
			
			isWaitedInReq[i] = false;     // wating inReq for each input port. maybe false or true
			waitedOutReq[i] = 5;           // wating outReq for each input port. maybe 0, 1, 2 or 3 
			
			inBufFull[i] = false;		
			inBufPtr [i]= 0;  			// all selectors of round robin schedulers are set to begin from port 0, except the o scheduler for output buffer
			inBufLen [i] = 0;
			
			outBufFull[i] = false;
			
			for (byte j = 0;j< 2; j++){
				waitedInReq[i][j] = 0;
				outBuf[i][j] = 0;
			
			}
		}
		inBufPtr [0]= 1; 				// round robin scheduler of 0 output buffer should start from 1 (not 0)
		
		for (byte i=0;i<4;i++){
			for (byte j = 0;j<2;j++){
				inBufX [i][j] = 0; 
				inBufY [i][j] = 0;
			}
		}	
		recieved = 0;

		if(X == 2 && Y == 3){
			manager.reset() after(600);
		}
	}
	
	
	// *********** Main routins ***************
	
	msgsrv inReq( byte inPort, byte Xtarget, byte Ytarget){
		if( !inBufFull[inPort]){   		 
			inBufX[inPort][inBufLen[inPort]] = Xtarget;
			inBufY[inPort][inBufLen[inPort]] = Ytarget;
		 
			inBufLen[inPort] = (byte)(inBufLen[inPort] + 1); 		
			if(inBufLen[inPort] == inBufSize) 			      //**c
				inBufFull[inPort] = true;				      //**c

			if (sender == N)
				N.inAck(0)after(writeT+ inAT);	
			else if (sender == E)
				E.inAck(3)after(writeT+ inAT);
			else if (sender == S)
				S.inAck(2)after(writeT+ inAT);
			else if (sender == W)
				W.inAck(1)after(writeT + inAT);
		}else{
			isWaitedInReq[inPort] = true;
			waitedInReq[inPort][0] = Xtarget;						
			waitedInReq[inPort][1] = Ytarget;		

		}	
		if(inBufLen[inPort] == 1){		                      //**if cond.c
			if(outReqEnable[inPort]){
				self.route(inPort, Xtarget, Ytarget)after(4);        
				outReqEnable[inPort] = false;				  //**c2
			}
		}	
	}
	
	msgsrv route(byte inPort, byte Xtarget, byte Ytarget) {
		if(Xtarget > Xid){		
			self.outReq(1, inPort)after(routT+ outRT);  
		} 
		else if(Xtarget < Xid){	
			self.outReq(3, inPort)after(routT+ outRT);   
		} 
		else if(Ytarget > Yid){	
			self.outReq(2, inPort)after(routT+ outRT);   
		}
		else if(Ytarget < Yid){	
			self.outReq(0, inPort)after(routT+ outRT);  
		}
		else if((Xtarget == Xid) && (Ytarget == Yid)){ 
			self.consume()after(routT);		         					
			self.outAck(inPort)after(routT);		 //************Moshkel dare vali
		}			
	}
	
	msgsrv consume(){
		recieved = (byte)recieved + 1;  
	}
	
	msgsrv inAck(byte outPort){						
		byte temp;
		byte turn = inBufPtr[outPort];
		outBufFull[outPort] = false;					//**c4	
		inReqEnable[outPort] = true;					//**c3
		
		for(byte i=0;i<4;i++){							//****** in for bayad check she
			if(waitedOutReq[turn] == outPort) {				//***** bayad waitedoutReq [turn] update beshe : waitedOutReq[turn] == 5
				
				outBuf[outPort][0] = inBufX[turn][0];
				outBuf[outPort][1] = inBufY[turn][0];
				outBufFull[outPort] = true;   		
				
				temp = (byte)schdT+ writeT;
				temp = (byte)temp + outAT;
				self.outAck(turn)after(temp);	       		//**-----
				
				inBufPtr[outPort] = (byte)(turn + 1) % 4;
			  	break;
			}
				turn = (byte)(turn + 1) % 4;
				if (turn == outPort){
					turn = (byte)(turn + 1) % 4;
				}	
		}		
		if(outBufFull[outPort]){    
			temp = (byte)schdT+ writeT;
			temp = (byte)temp + readT;
			temp = (byte)temp + inRT;
			self.inReq((byte)((outPort+2)%4), outBuf[outPort][0], outBuf[outPort][1])after((byte)(temp));		
			inReqEnable[outPort] = false;					//**c3
		}	
	}

	
	msgsrv outReq(byte outPort, byte inPort){
		if( outBufFull[outPort] == false ){   		
			outBuf[outPort][0] = inBufX[inPort][0];
			outBuf[outPort][1] = inBufY[inPort][0];
			outBufFull[outPort] = true; 										//** update outBufFull
			
			byte t0 = (byte)(readT+ writeT);	
			t0 = (byte)t0 + outAT;
			self.outAck(inPort)after(t0);										//** Sending outAck
			
			byte t1 = (byte)(readT+ writeT);
			t1 = (byte)(t1 + inRT);
			if(outPort == 0)
				N.inReq(2, outBuf[outPort][0], outBuf[outPort][1])after(t1);
			else if(outPort == 1)
				E.inReq(3, outBuf[outPort][0], outBuf[outPort][1])after(t1);
			else if(outPort == 2)
				S.inReq(0, outBuf[outPort][0], outBuf[outPort][1])after(t1);
			else if(outPort == 3)
				W.inReq(1, outBuf[outPort][0], outBuf[outPort][1])after(t1);			
			inReqEnable[outPort] = false;										//**c3
		} else
			waitedOutReq[inPort] = outPort;		   
	}
	
	msgsrv outAck(byte inPort){					
		byte lng, packX, packY;
		
		outReqEnable[inPort] = true;         	//**c2
		
		for(byte i= 1;i<inBufLen[inPort];i++){	
				inBufX[inPort][i - 1] = inBufX[inPort][i];
				inBufY[inPort][i - 1] = inBufY[inPort][i];
		}
		
		inBufLen[inPort] = (byte)inBufLen[inPort] - 1;			//******age packet resid be maghsad nabayad in khat ejra she
		
		if (isWaitedInReq[inPort] == true){			
			lng = inBufLen[inPort];                     
			inBufX[inPort][lng] = waitedInReq[inPort][0];
			inBufY[inPort][lng] = waitedInReq[inPort][1];
			
			if(inPort == 0)	N.inAck(2)after(writeT+ inAT);								
			else if(inPort == 1) E.inAck(3)after(writeT+ inAT);
			else if(inPort == 2) S.inAck(0)after(writeT+ inAT);
			else if(inPort == 3) W.inAck(1)after(writeT+ inAT);
			
			inBufLen[inPort] = (byte)inBufLen[inPort] + 1;			//******** updating the inBuffull
		}
		
		if (inBufLen[inPort] > 0){
			packX = inBufX[inPort][0];
			packY = inBufY[inPort][0]; 
			
			self.route(inPort, packX, packY)after(writeT);				
			outReqEnable[inPort] = false;					//**c2
		}			
	}
	
		// ********** routins for property checking ************
	
	
	msgsrv deadlineMiss(){
		delay(5);
	}
	
	msgsrv checkPoint(){
		self.deadlineMiss() after(1)deadline(3);
		self.deadlineMiss() after(1)deadline(3);
	}
	
	msgsrv checkRecieved(){
		
		if (recieved ==1){
			self.checkPoint();
		}
	}	
}

main {
	
	Manager m(r00,r10,r20,r30,r01,r11,r21,r31,r02,r12,r22,r32,r03,r13,r23,r33):();
	
	Router r00(m,r03,r10,r01,r30):(0,0);
	Router r10(m,r13,r20,r11,r00):(1,0);
	Router r20(m,r23,r30,r21,r10):(2,0);
	Router r30(m,r33,r00,r31,r20):(3,0);
	
	Router r01(m,r00,r11,r02,r31):(0,1);
	Router r11(m,r10,r21,r12,r01):(1,1);
	Router r21(m,r20,r31,r22,r11):(2,1);
	Router r31(m,r30,r01,r32,r21):(3,1);
	
	Router r02(m,r01,r12,r03,r32):(0,2);
	Router r12(m,r11,r22,r13,r02):(1,2);
	Router r22(m,r21,r32,r23,r12):(2,2);
	Router r32(m,r31,r02,r33,r22):(3,2);
	
	Router r03(m,r02,r13,r00,r33):(0,3);
	Router r13(m,r12,r23,r10,r03):(1,3);
	Router r23(m,r22,r33,r20,r13):(2,3);
	Router r33(m,r32,r03,r30,r23):(3,3);
	

} 



	