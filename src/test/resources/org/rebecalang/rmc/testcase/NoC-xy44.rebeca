
reactiveclass Manager(10){
	
	knownrebecs{
		Router r00;
		Router r10;
		Router r20;
		Router r30;
		Router r40;
		Router r50;
		Router r60;
		Router r70;
		
		Router r01;
		Router r11;
		Router r21;
		Router r31;
		Router r41;
		Router r51;
		Router r61;
		Router r71;
		
		Router r02;
		Router r12;
		Router r22;
		Router r32;
		Router r42;
		Router r52;
		Router r62;
		Router r72;
		
		Router r03;
		Router r13;
		Router r23;
		Router r33;
		Router r43;
		Router r53;
		Router r63;
		Router r73;
		
		Router r04;
		Router r14;
		Router r24;
		Router r34;
		Router r44;
		Router r54;
		Router r64;
		Router r74;
		
		Router r05;
		Router r15;
		Router r25;
		Router r35;
		Router r45;
		Router r55;
		Router r65;
		Router r75;
		
		Router r06;
		Router r16;
		Router r26;
		Router r36;
		Router r46;
		Router r56;
		Router r66;
		Router r76;
		
		Router r07;
		Router r17;
		Router r27;
		Router r37;
		Router r47;
		Router r57;
		Router r67;
		Router r77;
	}
	
	statevars{
	}
	
	Manager(){
	}
	
	msgsrv reset(){
	//	r00.init(0,0);
	//	r10.init(1,0);
	//	r20.init(2,0);
	//	r30.init(3,0);
		
	//	r01.init(0,1);
		r11.init(1,1);
	//	r21.init(2,1);
	//	r31.init(3,1);
		
	//	r02.init(0,2);
	//	r12.init(1,2);
	// 	r22.init(2,2);
	//	r32.init(3,2);
		
	//	r03.init(0,3);
	//	r13.init(1,3);
	//	r23.init(2,3);
	//	r33.init(3,3);
	//	r36.init(3,6);
	}
}

reactiveclass Router(10) {

	knownrebecs {
		Manager manager;
		Router N;  // : 0
		Router E;  // : 1
		Router S;  // : 2
		Router W;  // : 3		
	}
	
	statevars {
		byte bufSize;
		short maxTime;
		byte resendPeriod;
		byte produce_dly;
		
		byte bufNumN;
		byte bufNumE;
		byte bufNumS;
		byte bufNumW; 

		boolean fullN;
		boolean fullE;
		boolean fullS;
		boolean fullW;
		
		boolean[4] enable;
		boolean [4] outMutex;
		
		byte Xid;
		byte Yid;
		
		byte t;

		byte recieved;
		
	}
	
	Router(byte X, byte Y){
	
		bufSize = 2;
		 t = 0;
		
		bufNumN = 0;
		bufNumE = 0;
		bufNumS = 0;
		bufNumW = 0; 

		fullN = false;
		fullE = false;
		fullS = false;
		fullW = false;
		
		for(byte i=0; i<4; i++){		
			enable[i] = true;
			outMutex[i] = true;
		}
	
		Xid = X;
		Yid = Y;
		
		recieved = 0;
		maxTime = 300;
		
		//***************************** packet generation ****************************
		
		//-------------------------------------------------state : 753 ------
		if(X < 2 && Y < 3){
			if(!(X == 1 && Y == 1))
				self.reqSend(1,1,3,1) after (1);
		}
		
		
		/*
		//-------------------------------------------------state : 16752 ------
		if(X < 2 && Y < 3){
			if(!(X == 1 && Y == 1))
				self.reqSend(1,1,3,1) after (1);
		}
		if((X == 2 && Y < 2))
				self.reqSend(1,1,3,1) after (1);
		/*
		
		/*
		//-------------------------------------------------state : 83568 ------
		if(X < 3 && Y < 3){
			if(!(X == 1 && Y == 1))
				self.reqSend(1,1,3,1) after (1);
		}		
		*/
		
		/*
		//-------------------------------------------------Error ------
		if(X < 4 && Y < 4){
			if(!(X == 1 && Y == 1))
				self.reqSend(1,1,3,1) after (1);
		}
		*/
		
		
	/*	if((X <3  && Y == 4)){
				self. nondet();
				//self.reqSend(1,1,3,1) after (1);		
				}
	*/			
		
		// destination
		if(X == 1 && Y == 1){
			self.reStart() after(600);
			self.checkRecieved()after(maxTime);
		}
	}
	
	msgsrv init(byte X, byte Y){
		
		bufNumN = 0;
		bufNumE = 0;
		bufNumS = 0;
		bufNumW = 0; 

		fullN = false;
		fullE = false;
		fullS = false;
		fullW = false;
		
		for(byte i=0;i<4;i++){	
			enable[i] = true;
			outMutex[i] = true;	
		}
		
		Xid = X;
		Yid = Y;
		
		recieved = 0;

		//_________________________________________________Init: Packet generation______________________________
		
			
		if(X == 1 && Y == 1){
			self.reStart() after(600);
		}
	}
	
	msgsrv nondet(){
		t = ?(3, 4);
		self.reqSend(1,1,3,1) after (t);
	}
		
	//******************* sender side ***
	
	msgsrv reqSend(byte Xtarget, byte Ytarget, byte directionS, byte packId){	
		if (enable[directionS] == true){
			delay(1);
			boolean sent = false;
			if(Xtarget > Xid){		// Routing Algorithm XY: first move through horisental channels 
				if(outMutex[1] == true){	
					E.give_Ack(Xtarget, Ytarget,directionS,3,5, packId) after(26);//to which dirction we want to send the packet?
					outMutex[1] = false;
					enable[directionS] = false;
					sent = true;
				} else
					self.reqSend(Xtarget, Ytarget,directionS, packId) after(1);
			}	
			else if(Xtarget < Xid){	
				if(outMutex[3] == true){
					W.give_Ack(Xtarget, Ytarget,directionS,1,5, packId ) after(26);	
					outMutex[3] = false;
					enable[directionS] = false;
					sent = true;
				} else
					self.reqSend(Xtarget, Ytarget,directionS, packId) after(1);
			}	
			else if(Ytarget > Yid){	
				if(outMutex[2] == true){
					S.give_Ack(Xtarget, Ytarget,directionS,0,5, packId ) after(26);	
					outMutex [2] = false;
					enable[directionS] = false;
					sent = true;
				}else
					self.reqSend(Xtarget, Ytarget,directionS, packId) after(1);	
			}	
			else if(Ytarget < Yid){	
				if(outMutex[0] == true){
					N.give_Ack(Xtarget, Ytarget,directionS,2,5 , packId) after(26);	
					outMutex[0] = false;
					enable[directionS] = false;
					sent = true;
				}else
					self.reqSend(Xtarget, Ytarget,directionS,packId) after(1);
			}
			if(sent == true){
				if(directionS == 0)            //which port sent the message
				bufNumN = (byte)bufNumN + 1;
			else if(directionS == 1)
				bufNumE = (byte)bufNumE + 1;	
			else if(directionS == 2)
				bufNumS = (byte)bufNumS + 1;
			else if(directionS == 3)
				bufNumW = (byte)bufNumW + 1;	

			if (bufNumN == bufSize) fullN = true;         //update the value of "full" variable
			if (bufNumE == bufSize) fullE = true;
			if (bufNumS == bufSize) fullS = true;
			if (bufNumW == bufSize) fullW = true;
			}	
		} else
			self.reqSend(Xtarget, Ytarget,directionS,packId) after(1);
	}
	
	
	msgsrv get_Ack(byte directionS){
		enable[directionS] = true;
		
		if(directionS == 0){
			bufNumN = (byte)bufNumN - 1;	
			fullN = false;
		}else if (directionS == 1){
			bufNumE = (byte)bufNumE - 1;	
			fullE = false;
		}else if (directionS == 2){
			bufNumS = (byte)bufNumS - 1;	
			fullS = false;
		}else if (directionS == 3){
			bufNumW = (byte)bufNumW - 1;	
			fullW = false;
		}	

		if (sender == N) {
			outMutex[0] = true;
		}	
		else if (sender == E){ 
			outMutex[1] = true;
		}	
		else if (sender == S){
			outMutex[2] = true;
			}
		else if (sender == W){ 
			outMutex[3] = true;
		}	
	}

	//******************* reciever side ***
	
	msgsrv give_Ack(byte Xtarget, byte Ytarget,byte directionS, byte directionD,byte msgSender, byte packId){
		byte MSGSender;
		if(sender == N)
			MSGSender = 0;
		else if (sender == E)
			MSGSender = 1;
		else if (sender == S)
			MSGSender = 2;
		else if (sender == W)
			MSGSender = 3;
		else {MSGSender = msgSender;
			//trace(msgsender,Xid);
		}
				
		if(!(Xtarget == Xid && Ytarget == Yid)){
			if(directionD == 0){	
				if (fullN){
					self.give_Ack(Xtarget, Ytarget,directionS,directionD,MSGSender, packId)after(2);//time + 1
				}
				else{	
					self.reqSend(Xtarget, Ytarget,directionD, packId); //time + 1 
					
					if(MSGSender == 0)
						N.get_Ack(directionS);
					else if(MSGSender == 1)		
						E.get_Ack(directionS);
					else if(MSGSender == 2)		
						S.get_Ack(directionS);
					else if(MSGSender == 3)		
						W.get_Ack(directionS);
				}
			}else if(directionD == 1){
				if (fullE){
					self.give_Ack(Xtarget, Ytarget,directionS,directionD,MSGSender, packId)after(2);//time + 1
				}
				else{
			   		self.reqSend(Xtarget, Ytarget,directionD, packId);//time + 1

			   		if(MSGSender == 0)
						N.get_Ack(directionS);
					else if(MSGSender == 1)		
						E.get_Ack(directionS);
					else if(MSGSender == 2)		
						S.get_Ack(directionS);
					else if(MSGSender == 3)		
						W.get_Ack(directionS);
				}
			}else if(directionD == 2){
				if (fullS){
					self.give_Ack(Xtarget, Ytarget,directionS,directionD,MSGSender, packId)after(2);//time + 1
				//	trace(onefull,bufNumS);
				}
				else{
			   		self.reqSend(Xtarget, Ytarget,directionD, packId);//time + 1

			   		if(MSGSender == 0)
						N.get_Ack(directionS);
					else if(MSGSender == 1)		
						E.get_Ack(directionS);
					else if(MSGSender == 2)		
						S.get_Ack(directionS);
					else if(MSGSender == 3)		
						W.get_Ack(directionS);
				}
			}else if(directionD == 3){
				if (fullW){
					self.give_Ack(Xtarget, Ytarget,directionS,directionD,MSGSender, packId)after(2);//time + 1
				//	trace(onefull,bufNumW);
				}
				else{
			   		self.reqSend(Xtarget, Ytarget,directionD, packId );//time + 1

			   		if(MSGSender == 0)
						N.get_Ack(directionS);
					else if(MSGSender == 1)		
						E.get_Ack(directionS);
					else if(MSGSender == 2)		
						S.get_Ack(directionS);
					else if(MSGSender == 3)		
						W.get_Ack(directionS);
				}
			}
			
		}		
		
		else if((Xtarget == Xid && Ytarget == Yid)){
				//reach target , then one packet should be reduced from the owner buffer
				//if(packId ==5 ){
					recieved = (byte)recieved + 1;
				//	}
					
				
				//manager.packet_recieved();
				
				if(MSGSender == 0)
					N.get_Ack(directionS);
				else if(MSGSender == 1)		
					E.get_Ack(directionS);
				else if(MSGSender == 2)		
					S.get_Ack(directionS);
				else if(MSGSender == 3)		
					W.get_Ack(directionS);
			}
	}//end give_Ack

	msgsrv reStart(){
		manager.reset();
	}	
	
	msgsrv makeLoop(){
		if (recieved == 0){
			self.checkPoint();
		}
	}
	
	msgsrv deadlineMiss(){
		delay(5);
	}
	
	msgsrv checkPoint(){
		self.deadlineMiss() after(1);
		self.deadlineMiss() after(1);
	}
	
	//************************************************** "Finally" properties********************************
	
	msgsrv checkRecieved(){
		
		/*if (recieved == 0){
			self.checkPobyte();
		}*/
		if (recieved < 5 ){ //3
			self.checkPoint();
		}
		else if (recieved > 3){

		}	
	}
}

main {
	//NoC 2*2
	/*
	Manager m(r00,r01,r10,r11):();
	Router r00(m,r01,r10,r01,r10):(0,0);
	Router r10(m,r11,r00,r11,r00):(1,0);

	Router r01(m,r00,r11,r00,r11):(0,1);
	Router r11(m,r10,r01,r10,r01):(1,1);
	*/
	
	//NoC 4*4
/*	
	Manager m(r00,r10,r20,r30,r01,r11,r21,r31,r02,r12,r22,r32,r03,r13,r23,r33):();
	
	Router r00(m,r03,r10,r01,r30):(0,0);
	Router r10(m,r13,r20,r11,r00):(1,0);
	Router r20(m,r23,r30,r21,r10):(2,0);
	Router r30(m,r33,r00,r31,r20):(3,0);
	
	Router r01(m,r00,r11,r02,r31):(0,1);
	Router r11(m,r10,r21,r12,r01):(1,1);
	Router r21(m,r20,r31,r22,r11):(2,1);
	Router r31(m,r30,r01,r32,r21):(3,1);
	
	Router r02(m,r01,r12,r03,r32):(0,2);
	Router r12(m,r11,r22,r13,r02):(1,2);
	Router r22(m,r21,r32,r23,r12):(2,2);
	Router r32(m,r31,r02,r33,r22):(3,2);
	
	Router r03(m,r02,r13,r00,r33):(0,3);
	Router r13(m,r12,r23,r10,r03):(1,3);
	Router r23(m,r22,r33,r20,r13):(2,3);
	Router r33(m,r32,r03,r30,r23):(3,3);
*/

    //NoC 8* 8
	
	Manager m(r00,r10,r20,r30,r40,r50,r60,r70,
			  r01,r11,r21,r31,r41,r51,r61,r71,
			  r02,r12,r22,r32,r42,r52,r62,r72,
			  r03,r13,r23,r33,r43,r53,r63,r73,
			  r04,r14,r24,r34,r44,r54,r64,r74,
			  r05,r15,r25,r35,r45,r55,r65,r75,
			  r06,r16,r26,r36,r46,r56,r66,r76,
			  r07,r17,r27,r37,r47,r57,r67,r77
			  ):();
	
	Router r00(m,r07,r10,r01,r70):(0,0);
	Router r10(m,r17,r20,r11,r00):(1,0);
	Router r20(m,r27,r30,r21,r10):(2,0);
	Router r30(m,r37,r40,r31,r20):(3,0);
	Router r40(m,r47,r50,r41,r30):(4,0);
	Router r50(m,r57,r60,r51,r40):(5,0);
	Router r60(m,r67,r70,r61,r50):(6,0);
	Router r70(m,r77,r00,r71,r60):(7,0);
	
	Router r01(m,r00,r11,r02,r71):(0,1);
	Router r11(m,r10,r21,r12,r01):(1,1);
	Router r21(m,r20,r31,r22,r11):(2,1);
	Router r31(m,r30,r41,r32,r21):(3,1);
	Router r41(m,r40,r51,r42,r31):(4,1);
	Router r51(m,r50,r61,r52,r41):(5,1);
	Router r61(m,r60,r71,r62,r51):(6,1);
	Router r71(m,r70,r01,r72,r61):(7,1);
	
	Router r02(m,r01,r12,r03,r72):(0,2);
	Router r12(m,r11,r22,r13,r02):(1,2);
	Router r22(m,r21,r32,r23,r12):(2,2);
	Router r32(m,r31,r42,r33,r22):(3,2);
	Router r42(m,r41,r52,r43,r32):(4,2);
	Router r52(m,r51,r62,r53,r42):(5,2);
	Router r62(m,r61,r72,r63,r52):(6,2);
	Router r72(m,r71,r02,r73,r62):(7,2);
	
	Router r03(m,r02,r13,r04,r73):(0,3);
	Router r13(m,r12,r23,r14,r03):(1,3);
	Router r23(m,r22,r33,r24,r13):(2,3);
	Router r33(m,r32,r43,r34,r23):(3,3);
	Router r43(m,r42,r53,r44,r33):(4,3);
	Router r53(m,r52,r63,r54,r43):(5,3);
	Router r63(m,r62,r73,r64,r53):(6,3);
	Router r73(m,r72,r03,r74,r63):(7,3);

	Router r04(m,r03,r14,r05,r74):(0,4);
	Router r14(m,r13,r24,r15,r04):(1,4);
	Router r24(m,r23,r34,r25,r14):(2,4);
	Router r34(m,r33,r44,r35,r24):(3,4);
	Router r44(m,r43,r54,r45,r34):(4,4);
	Router r54(m,r53,r64,r55,r44):(5,4);
	Router r64(m,r63,r74,r65,r54):(6,4);
	Router r74(m,r73,r04,r75,r64):(7,4);
	
	Router r05(m,r04,r15,r06,r75):(0,5);
	Router r15(m,r14,r25,r16,r05):(1,5);
	Router r25(m,r24,r35,r26,r15):(2,5);
	Router r35(m,r34,r45,r36,r25):(3,5);
	Router r45(m,r44,r55,r46,r35):(4,5);
	Router r55(m,r54,r65,r56,r45):(5,5);
	Router r65(m,r64,r75,r66,r55):(6,5);
	Router r75(m,r74,r05,r76,r65):(7,5);
	
	Router r06(m,r05,r16,r07,r76):(0,6);
	Router r16(m,r15,r26,r17,r06):(1,6);
	Router r26(m,r25,r36,r27,r16):(2,6);
	Router r36(m,r35,r46,r37,r26):(3,6);
	Router r46(m,r45,r56,r47,r36):(4,6);
	Router r56(m,r55,r66,r57,r46):(5,6);
	Router r66(m,r65,r76,r67,r56):(6,6);
	Router r76(m,r75,r06,r77,r66):(7,6);
	
	Router r07(m,r06,r17,r00,r77):(0,7);
	Router r17(m,r16,r27,r10,r07):(1,7);
	Router r27(m,r26,r37,r20,r17):(2,7);
	Router r37(m,r36,r47,r30,r27):(3,7);
	Router r47(m,r46,r57,r40,r37):(4,7);
	Router r57(m,r56,r67,r50,r47):(5,7);
	Router r67(m,r66,r77,r60,r57):(6,7);
	Router r77(m,r76,r07,r70,r67):(7,7);
	
} 

