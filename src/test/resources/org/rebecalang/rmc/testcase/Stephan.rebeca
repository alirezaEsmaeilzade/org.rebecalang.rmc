reactiveclass Physics(3)
{
      knownrebecs
      {
            Renderer r;
      }
     
      statevars
      {
            int entities;
            int stepCounter;
      }
     
      Physics(int e)
      {
            entities = e;
            stepCounter = 0;
            self.PerformSimulationStep();
      }
 
     
      msgsrv PerformSimulationStep()
      {
           
            for( int i = 0; i < entities; i++ )
            {
                  delay( 1 );
                  r.NotifyWrite(i, stepCounter);
            }
            stepCounter += 1;
            stepCounter = stepCounter % 3;
            delay( 16 );
            self.PerformSimulationStep() after( 1 );
           
      }
}
 
reactiveclass Renderer(10)
{
      knownrebecs
      {
            Physics p;
      }
     
      statevars
      {
            int entities;
            int[2] data;
            boolean valid;
      }
     
      Renderer(int e)
      {
            entities = e;
            valid = true;
            self.PerformSimulationStep();
      }
     
     
      msgsrv PerformSimulationStep()
      {
            valid = data[0] == data[1];
            delay( 16 );
            self.PerformSimulationStep() after( 1 );
      }
     
      msgsrv NotifyWrite( int e, int v )
      {
            data[e] = v;
      }
}
 
 
 
main {
      Renderer r(p):(2);
      Physics p(r):(2);
}
