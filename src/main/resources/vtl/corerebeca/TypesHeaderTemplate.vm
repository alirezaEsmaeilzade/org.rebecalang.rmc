#*In the name of Allah*#

#ifndef __MODERE_TYPES_H__
\#define __MODERE_TYPES_H__

\#include <exception>
\#include <iostream>
\#include <string>
 
using namespace std;


\#define INITIAL_SENDER 99

#ifndef null
\#define null 0
#endif

#ifndef boolean
\#define boolean unsigned char
#endif

#ifndef false
\#define false 0
#endif

#ifndef true
\#define true 1
#endif

#ifndef byte
//Modified by Ehsan (byte is a signed value, why MMJ changed in to unsigned?)
\#define byte char
#endif


\#define REBEC_COUNT $rebecCount

class Exception: public exception {
protected:
	string message;
public:
	Exception(string message) {
		this->message = message;
	}
	~Exception() throw() {}
	const string getMessage() {
		return message;
	}
};

class AssertionFailedException: public Exception {
public:
	AssertionFailedException(string message) : Exception(message){}
	~AssertionFailedException() throw() {}
};

class QueueOverflowException: public Exception {
public:
	QueueOverflowException(string message) : Exception(message){}
	~QueueOverflowException() throw() {}
};

class HeapOverflowException: public Exception {
public:
	HeapOverflowException(string message) : Exception(message){}
	~HeapOverflowException() throw() {}
};

class DeadlockException: public Exception {
public:
	DeadlockException(string message) : Exception(message){}
	~DeadlockException() throw() {}
};



 /*
  * The hash function is taken from SPIN, and is based on
  * the public domain hash function from Bob Jenkins, 1996.
  * see: http://www.burtleburtle.net/bob/
  * It is changed to fit the data structures.
  */
\#define mix(a,b,c) \
{ a -= b; a -= c; a ^= (c >> 13); \
  b -= c; b -= a; b ^= (a << 8);  \
  c -= a; c -= b; c ^= (b >> 13); \
  a -= b; a -= c; a ^= (c >> 12); \
  b -= c; b -= a; b ^= (a << 16); \
  c -= a; c -= b; c ^= (b >> 5);  \
  a -= b; a -= c; a ^= (c >> 3);  \
  b -= c; b -= a; b ^= (a << 10); \
  c -= a; c -= b; c ^= (b >> 15); \
}

#endif