                                                #*In the name of Allah*#



\#include "Types.h"
\#include "AcAut.h"

#*I have defined classCount below for this:*#
#foreach($reactiveClassDeclaration in $reactiveClassDeclarations)
    \#include "${reactiveClassDeclaration.getName()}.h"
#end

void unmarshalRebecs(long* node) {
	for (int i = 0; i < REBEC_COUNT; i++) {
        rebecs[i]->unmarshal (node[i]);   // uncompress all states of all rebecs
    }
}

void marshalRebecs(long* node) {
	for (int i=0; i<REBEC_COUNT; i++){
		node[i] = rebecs[i]->marshal();
	}
}

#ifdef DEBUG
void printStateContent(long* node, ostream &out) {
	for (int i=0; i<REBEC_COUNT; i++){
		rebecs[i]->printStateContent(node[i], out);
		out << endl;
	}
}
#endif

// the first known rebec of each rebec is itself
// The trailing -1 is needed in symmetry detection algorithms & reverseKnown calculation

long getNextSysState(long* rebecsState, byte rebecIndex) {
    int i;
	long moreTrans;

	for (i = 0; i < REBEC_COUNT; i++) {
        rebecs[i]->unmarshal (rebecsState[i]);   // uncompress all states of all rebecs
    }   // it is for send operations
    moreTrans = rebecs[rebecIndex]->execute(rebecsState);


    for (i=0; i<REBEC_COUNT; i++){
        rebecsState[i] = rebecs[i]->marshal();
    }

	return moreTrans;
}

void initialize(long* rebs) {

    rebecs = new ActiveclassAutomaton*[REBEC_COUNT];
	byte maxRebecID = 0;

	// If there any parameters to the "initial" msgsrv, it must be sent to the constructor
	// parameter to the constructor: (myID, myName, creatorID, param_list_of_initial)
	// myName is the name used in the rebeca model for each rebec
	// Here, creatorID is the same as myID (they are different in dynamic creation)

    #set($counter = 0);
    #foreach($instance in $mainDefinition.getMainRebecDefinition())
    	#set($type = $TypesUtilities.getTypeName($instance.getType()))
    	$type* _ref_${instance.getName()} = new  ${type}(maxRebecID++, "${instance.getName()}", INITIAL_SENDER);
        rebecs[$counter] = _ref_${instance.getName()};
        #set($counter = $counter + 1)
	#end
	#set($counter = 0)
    #foreach($instance in $mainDefinition.getMainRebecDefinition())
    	_ref_${instance.getName()}->known = new byte[MAX_KNOWN];
    	#set($counter2 = 1)
    	_ref_${instance.getName()}->known[0] = _ref_${instance.getName()}->myID;
    	#foreach($expression in $instance.getBindings()) _ref_${instance.getName()}->known[$counter2] = $expressionTranslator.translate($expression, null)->myID;
    		#set($counter2 = $counter2 + 1)
		#end

		#if ($features.contains("CORE_2_0"))
			#set($initialMsgName = "_msg_initial")
		#else
			#set($initialMsgName = "constructor" + $TypesUtilities.getTypeName($instance.getType()))
		#end
		(($TypesUtilities.getTypeName($instance.getType())*)_ref_${instance.getName()})->$initialMsgName(INITIAL_SENDER
	        #foreach($argumentExpression in $instance.getArguments())
	        , expressionTranslator.translate($argumentExpression)
	        #end
		);
		rebs[$counter] = _ref_${instance.getName()}->marshal();

        #set($counter = $counter + 1)
	#end
	
}
