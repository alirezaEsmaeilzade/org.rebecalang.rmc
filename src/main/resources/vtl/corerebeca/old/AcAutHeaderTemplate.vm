#*In the name of Allah*#

#ifndef __MODERE_ACAUT_H__
\#define __MODERE_ACAUT_H__

\#include "Types.h"
\#include "Config.h"
\#include <iostream>
using namespace std;


#if ($namespace)
namespace $namespace {
#end

\#define EMPTY		0
\#define INITIAL	1

// includes self & one extra for -1
\#define MAX_KNOWN ($maxKnownRebec + 1)

#*maxActions will hold one plus max number of msgsrvs*#
\#define MAX_ACTIONS $maxMethodNumber

class ActiveclassAutomaton {

public:

	static const byte coeff[];

    ActiveclassAutomaton(byte myID, char * myName, int localHashmapSize);
    virtual ~ActiveclassAutomaton();

    virtual long execute (long* rebs)=0;
    virtual long marshal()=0;
    virtual void unmarshal(long state)=0;
	#ifdef DEBUG
	virtual void printStateContent(long stateNo, ostream &out) = 0;
	#endif
	
	virtual void exportStateInXML(ostream &out, string tab) = 0;
	virtual void exportStateVariablesInXML(ostream &out, string tab) = 0;
	virtual void exportQueueContentInXML(ostream &out, string tab) = 0;

    virtual int getStateSize() = 0;
    virtual char* getClassName() = 0;
    virtual int consumedMemory() = 0;
    //virtual void printState(long state , ostream &out)=0;
    //virtual void printGraphvizState(ostream &out)=0;

    char* getName();
    char* activeAction();					// the action at queue head

    byte myID;
    char* myName;
    byte *known;	// list of indexes of known rebecs

    // message queue is made public to be accessible by areActiveActionsSafe()
    byte* messageQueue;
    byte* senderQueue;
    
    char ** messageNames;
    byte** paramQueue;
    byte maxParamQueueLength;
    byte maxQueueLength;

    void setRebecs(ActiveclassAutomaton **rebecs);
    
protected:
    byte queueTail;
    int stateSize;
    int shift;
    int marshalIndex;
    int hashmapSize;
    ActiveclassAutomaton **rebecs;

    void enqueue(byte *queue, byte message);
    void enqueue(byte **queue, byte *message, int size);

    unsigned int hashCode (byte *v);
    
    void _synchmethod_assertion (/*string message*/ byte id, boolean condition);
};

#if ($namespace)
}
#end


#endif