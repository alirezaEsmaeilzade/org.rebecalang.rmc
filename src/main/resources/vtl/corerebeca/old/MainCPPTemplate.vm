                                          #*In the name of Allah*#
\#include "Types.h"
\#include "Config.h"
\#include <stdlib.h>
\#include <stdio.h>
\#include <string.h>

\#include "CTLMC.h"

\#include <fstream>
\#include <iostream>

using namespace std;

void modere(char *propertyName, ostream &out, bool dottyFormat);
void bodere(char *propertyName, ostream &out, bool dottyFormat);
void eldarica(char *propertyName, ostream &out){startCTL(propertyName, out, 1);}

extern boolean qOverflowEnable;	// whether to break/continue search upon qOverflow
extern boolean deadlockEnable;	// whether to detect/ignore deadlocks

extern int maxDepth;
char *userSelectedPropertyName = NULL;
char *userSelectedPropertyType = NULL;
ofstream outputReport;
int hashmapSize;
bool dottyFormat = false;
bool bfs = false;
bool simulatorEnable = false;
bool printCounterExample = true;

#ifdef GRAPH_VIZ
ofstream graphVizOut;
#endif

#ifdef CADP
ofstream cadpOut;
#endif

void printError(char *errorMessage, ostream &out) {
    out  <<  "<model-checking-report>"  <<  endl;
    out  <<  "<fatal-runtime-error>"  <<  errorMessage  <<  "</fatal-runtime-error>"  <<  endl;
    out  <<  "</model-checking-report>"  <<  endl;
}

void usage (){
	cout <<  "Modere usage:"  <<  endl;
	cout  <<  "\t-noDeadlock	: disables deadlock detecion."  <<  endl;
	cout  <<  "\t-noQOverflow	: continue search when queue overflow."  <<  endl;
	cout  <<  "\t-md value	: set max search depth to \"value\" (default is 10000 and should be more that 1000)."  <<  endl;
	cout  <<  "\t-hs value	: set hashmap size to value\"2^value\" (default is 20 and should be more that 10)."  <<  endl;
	cout  <<  "\t-pt value	: set property type to \"value\" (default is \"LTL\")."  <<  endl;
	cout  <<  "\t-pn value	: set property name to \"value\" (default is \"default deadlock\")."  <<  endl;
	cout  <<  "\t-o  value	: set output location file to \"value\" (default is standard console)."  <<  endl;
	cout  <<  "\t-do  value	: set output format to dotty style (inorder to visualize counter example)."  <<  endl;
	cout  <<  "\t-bfs value	: change the model checking algorithm to the BFS."  <<  endl;
	cout  <<  "\t-sim-start value: Starts the simulator server on port \"value\"."  <<  endl;
	cout  <<  "\t-viz-out value:  \"value\"."  <<  endl;
	cout  <<  "\t-cadp-out value:  \"value\"."  <<  endl;
	cout  <<  "\t-h		: prints this help screen and exits."  <<  endl;
	exit(0);
}

void commandLine (int argc, char*argv[]) {
	int selector = 1;
    argv++;
	while (selector != argc) {
		if (!strcmp (*argv, "-noDeadlock")) {
			deadlockEnable = false;
			printf ("Deadlock detection disabled.\n");
		} else if (!strcmp (*argv, "-noQOverflow")) {
			qOverflowEnable = false;
			printf ("Queue overflow detection disabled (continues on queue overflow).\n");
		} else if (!strcmp (*argv, "-md")) {
			argv++;
			selector++;
			int mD = atoi (*argv);

			if (mD < 10) {
				maxDepth = 1000;
				//printf ("Max search depth cannot be less than 1000. ");
			} else {
				maxDepth = mD;
			}
			//printf ("Max search depth set to %d.\n", maxDepth);

		} else if (!strcmp (*argv, "-h")) {
			usage();
		} else if (!strcmp (*argv, "-hs")) {
            argv++;
			selector++;
			hashmapSize = atoi (*argv);
			if (hashmapSize < 10) {
				hashmapSize = 10;
				//printf ("Hashmap size cannot be less than 10.\n");
			}
			//printf ("Hashmap size set to %d.\n", hashmapSize);
		} else if (!strcmp (*argv, "-pn")) {
            argv++;
			selector++;
			userSelectedPropertyName = new char[strlen(*argv) + 1];
			strcpy(userSelectedPropertyName, (*argv));
		} else if (!strcmp (*argv, "-pt")) {
            argv++;
			if(strcmp(*argv, "CTL") && strcmp(*argv, "LTL")) {
				cout  <<  "Property type (-pt) should be LTL or CTL."  <<  endl;
				exit(0);
			}
			selector++;
			userSelectedPropertyType = new char[strlen(*argv) + 1];
			strcpy(userSelectedPropertyType, (*argv));
		} else if (!strcmp (*argv, "-o")) {
            argv++;
			selector++;
			outputReport.open(*argv, ios::out|ios::trunc);
        #ifdef GRAPH_VIZ
		} else if (!strcmp (*argv, "-viz-out")) {
            argv++;
			selector++;
			graphVizOut.open(*argv, ios::out|ios::trunc);
        #endif
        #ifdef CADP
		} else if (!strcmp (*argv, "-cadp-out")) {
            argv++;
			selector++;
			cadpOut.open(*argv, ios::out|ios::trunc);
        #endif
		} else if (!strcmp (*argv, "-do")) {
			dottyFormat = true;
		} else if (!strcmp (*argv, "-noCounterExample")) {
			printCounterExample = false;
        #if($features.contains("SYSTEM_C"))
		} else if (!strcmp (*argv, "-vsim")) {
			simulatorEnable = true;
			if (selector + 1 < argc) {
				if ((*(argv+1))[0] != '-') {
					argv++;
	    			selector++;
		    		reductionLevel = atoi(*argv);
				}
			}
        #end
		} else if (!strcmp (*argv, "-bfs")) {
			bfs = true;
		}
		selector++; argv++;
	}
	printf ("\n");
}

void noMoreSpaceOrArrayIndexOutofBoundHandler(int signum);

int main(int argc, char* argv[]) {
	signal(SIGSEGV, noMoreSpaceOrArrayIndexOutofBoundHandler);  
    maxDepth = 10000;
    hashmapSize = 20;
    ostream *myout = &cout;
	commandLine(argc, argv);
	if (outputReport.is_open()) {
		myout = &outputReport;
	}

    if (userSelectedPropertyType == NULL)
        userSelectedPropertyType = (char *)"LTL";

    if (!strcmp(userSelectedPropertyType, "LTL")) {
        if (bfs) {
            bodere(userSelectedPropertyName, *myout, dottyFormat);
        } else {
            modere(userSelectedPropertyName, *myout, dottyFormat);
        }
    } else if (!strcmp(userSelectedPropertyType, "CTL")) {
        eldarica(userSelectedPropertyName, *myout);
    }
    if (outputReport.is_open()) {
        outputReport.close();
    }
    return 0;
}
