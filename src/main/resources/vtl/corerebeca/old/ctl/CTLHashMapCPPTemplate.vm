\#include "CTLHashMap.h"

#ifdef VERBOSE
extern long collision;
#endif


/*
The equality of two states depends only on "sys" and "claim" elements.
This function is used so that one state is never stored twice.
*/
boolean _SystemState::equals(long* sys){
	for (int i=0; i < REBEC_COUNT; i++) {
		if (this->rebecStates[i] != sys[i]) {
			return false;
		}
	}
	return true;
}


CTLHashMap::CTLHashMap()
{
    int xuy = (1 << hashmapSize);
	table = new SystemState [xuy];
    memset (table, 0, (1 << hashmapSize)*sizeof(SystemState));
}

CTLHashMap::~CTLHashMap()
{
	    delete [] table;
}

\#define mix(a,b,c) \
{  a -= b; a -= c; a ^= (c >> 13); \
   b -= c; b -= a; b ^= (a << 8);  \
   c -= a; c -= b; c ^= (b >> 13); \
   a -= b; a -= c; a ^= (c >> 12); \
   b -= c; b -= a; b ^= (a << 16); \
   c -= a; c -= b; c ^= (b >> 5);  \
   a -= b; a -= c; a ^= (c >> 3);  \
   b -= c; b -= a; b ^= (a << 10); \
   c -= a; c -= b; c ^= (b >> 15); \
}

unsigned int CTLHashMap::hashCode(void *v, unsigned long length, unsigned int mask) {
    unsigned long a, b, c, len = length;

    byte *k = (byte*)v;
    a = b = 0x9e3779b9;
    c = 0;
    while (len >= 3)
    {	a += k[0];
        b += k[1];
        c += k[2];
        mix(a,b,c);
        k += 3; len -= 3;
    }
    c += length;
    switch (len) {
        case 2: b+=k[1];
        case 1: a+=k[0];
    }
    mix(a,b,c);
    return c & mask;
}

/*
Check if a state identified by "sys" is already stored.
*/
boolean CTLHashMap::exists (long* sys) {
    hashValue = hashCode(sys, (REBEC_COUNT)*sizeof(long), (1 << hashmapSize)-1);
    current = table[hashValue];
    if (current == null) return false;
    while (current){	// use "buckets" for collision handling
        if (current->equals(sys)) return true;
        current = current->next;
    }
    return false;
}

/*
After we make sure the state identified by "sys" and "claim" is not
already stored (with exists()), this function is called to store the
state.
This function sets no flags for the given state, because in different
situations (like BFS) different flags must be set.
*/
SystemState CTLHashMap::put (long* sys){
	// only called after exists(), so hashValue is already calculated properly
    current = table[hashValue];
    #ifdef VERBOSE
	    if (current) collision++;	// count the number of collisions
    #endif
    SystemState prev = null;
    while (current){	// move to the end of bucket
        prev = current;
        current = current->next;	// move in the bucket
    }
    current = new _SystemState;
	current->rebecStates = new long[REBEC_COUNT];
    for (int i=0; i<REBEC_COUNT; i++)
        (current)->rebecStates[i] = sys[i];
    current->next = null;
    if (prev)
        prev->next = current;
    else
        table[hashValue] = current;
	return current;
}

/*
Both exists() and put() point "current" to the last state referenced.
*/
SystemState CTLHashMap::getState(){
    return current;
}
