#ifndef __ELDARICA_CTLSS_H_
\#define __ELDARICA_CTLSS_H_

\#include "Types.h"
\#include "AcAut.h"
\#include "RebecMgr.h"
\#include "CTLHashMap.h"
\#include <stdio.h>
\#include <stdlib.h>
\#include <string.h>

//added by mehdi
\#define MAX_FORMULA_LENGTH 20;

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
struct _SSStack {
struct _SystemState* sstate;
};



\#define SS_PUSH(newState) \
++ssStackTop;	\
ssStack[ssStackTop].sstate = newState;	\
ctlMaxReached = ssStackTop > ctlMaxReached ? ssStackTop : ctlMaxReached;

\#define SS_TOP \
ssStack[ssStackTop].sstate;

\#define SS_POP \
ssStack[ssStackTop].sstate; --ssStackTop;

\#define SS_EMPTY \
ssStackTop == -1

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
struct _NextRebecToExe {
byte rebecId;
};


\#define NRE_PUSH(id) \
++nextRebecToExeStackTop;	\
nextRebecToExeStack[nextRebecToExeStackTop].rebecId = id;

\#define NRE_TOP \
nextRebecToExeStack[nextRebecToExeStackTop].rebecId;

\#define NRE_POP \
nextRebecToExeStack[nextRebecToExeStackTop].rebecId; --nextRebecToExeStackTop;

\#define NRE_EMPTY \
nextRebecToExeStackTop == -1;

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



extern boolean qOverflow;		// set by ActiveclassAutomaton descendants - "extern" in AcAut.cpp
extern ActiveclassAutomaton** rebecs;	// system model
extern void generateStateSpace(byte);
extern struct _SystemState** systemStates;
extern long systemStatesSize;

#endif

