#*In the name of Allah*#

\#include "ClaimAut.h"
\#include "AcAut.h"

#foreach($reactiveClassDeclaration in $reactiveClassDeclarations)
\#include "${reactiveClassDeclaration.getName()}.h"
#end

\#include <string.h>

// show which states of the claim automaton are accepting

#set($max = 0)
#foreach ($claimGraphName in $ltlSpecifications.keySet())
    #set ($claimGraph = $ltlSpecifications.get($claimGraphName))
    #if ($max < $claimGraph.nodes.size())
        #set($max = $claimGraph.nodes.size())
    #end
#end


#if($max != 0)
    bool accepting [][$max] = {
    #foreach ($claimGraphName in $ltlSpecifications.keySet())
        #set ($claimGraph = $ltlSpecifications.get($claimGraphName))
        {
        #if ($claimGraph.nodes.size() == 0)
            false
        #else
            #set($bound = $claimGraph.nodes.size() - 1)
            #foreach ($cnt in [0..$bound])
                #foreach ( $node in $claimGraph.nodes)
                    #if ($node.getIntAttribute("_id") == $cnt)
                        #if ($node.getBooleanAttribute("accepting"))
                            true,
                        #else
                            false,
                        #end
                    #end
                #end
            #end
        #end
        },
    #end
    };
#end
bool isAccepting(int claim, int propertySelector) {
    if(claim == -1)
        return false;
#if($max != 0)
    switch (propertySelector) {
        #set($counter = 0)
        #foreach ($claimGraphName in $ltlSpecifications.keySet())
            case __propertyName_$claimGraphName :
                return accepting[$counter][claim];
            #set($counter = $counter + 1)
        #end
    }
#end
    return false;
}


#if ($features.contains("REDUCTION"))

#error "reduction section is found."

#ifdef PO

boolean actionsSafety[REBEC_COUNT][$ltlSpecifications.keySet().size() + 1][MAX_ACTIONS + 1] = {
#set($rebecCount = $mainDefinition.getLength() - 1)
#foreach($cnt in [0..$rebecCount])
    {
	#set($saftyArray = $staticPartialOrderDetector.findSafeMessages($mainDefinition.item($cnt).getChildNodes().item(0).getFirstChild().getNodeValue()))
	#foreach($saftyRow in $saftyArray)
	    {
	    false
        #foreach($saftyCell in $saftyRow)
            , $saftyCell
        #end
        },
	#end
	},
#end
};

boolean areActiveActionsSafe(long*rebecsState, byte r, int propertySelector){
	rebecs[r]->unmarshal(rebecsState[r]);
	// "rebecs[r]->messageQueue[0] - 1" Because initial message server ID is 1
	return actionsSafety[rebecs[r]->myID][propertySelector][rebecs[r]->messageQueue[0] - 1];
}

#endif
#end
                                        
/**
 * This method performs the actual synchronous product of claim and system
 */
long getNextClaimState(long claimState, long& remainingTransitions, int propertySelector) {

    //Todo: Just supports 254 non-deterministic transition in each state.
    byte matchedTransitions = 0;
    switch (propertySelector) {
        #foreach ($claimGraphName in $ltlSpecifications.keySet())
            case __propertyName_$claimGraphName :
                #set ($claimGraph = $ltlSpecifications.get($claimGraphName))
                switch (claimState) {
                    #foreach ($node in $claimGraph.nodes)
                        case $node.getIntAttribute("_id") :
                            claimState = -1;
                            #set($ifCounter = 1)
                            #foreach ($edge in $node.outgoingEdges)
                                #if($edge.guard != "-")
                                    if (
                                    #foreach($guardName in $guardNameSeperator.splitString($edge.getGuard(), "&"))
                                        #if ($guardName == $guardNameSeperator.splitString($guardName, "!").get(0))
                                            evaluate("$guardName") &&
                                        #else
                                            #set($guardName = $guardNameSeperator.splitString($guardName, "!").get(0))
                                            !evaluate("$guardName") &&
                                        #end
                                    #end
                                #else
                                    if (
                                #end
                                ((remainingTransitions & $ifCounter) == 0) ) {
                                    if(matchedTransitions == 0) {
                                        remainingTransitions |= $ifCounter;
                                        claimState = $edge.next.getIntAttribute("_id");
                                    }
                                    matchedTransitions++;
                                }
                                #set($ifCounter = $ifCounter * 2)
                            #end
                            break;
                        #end
                }
                break;
        #end
    }
    if(matchedTransitions < 2)
	    remainingTransitions = 0;// and stay in the same state
    return claimState;
}
byte propertyIdentifier(char *propertyName) {
    if (propertyName == null)
        return 0;
    #foreach ($claimGraphName in $ltlSpecifications.keySet())
    else if(!strcmp(propertyName, "$claimGraphName"))
        return __propertyName_$claimGraphName;
    #end
    return -1;
}

byte getPropertyInitialState(int propertySelector) {
    switch(propertySelector) {
    #foreach ($claimGraphName in $ltlSpecifications.keySet())
    case __propertyName_$claimGraphName:
        return $claimGraph.getInit().getIntAttribute("_id");
    #end
    default:
        return 0;
    };
}