                                    #*In the name of Allah*#
\#include "Types.h"
\#include "${reactiveClassName}.h"
\#include <stdio.h>
\#include <string.h>

// Todo Set this field automatically
/* STATE_SIZE must be "qLen*(1+1+p) + statevars", where "p" shows the number of
   parameter queues, and by "statevars" we mean the space needed for storing
   all state variables in this rebec. Notice that local variables and parameters
   can be bigger than one byte. Special care must be taken when marshallig and
   unmarshalling.*/

\#define STATE_SIZE $STATE_SIZE

extern int hashmapSize;


/**
 * This method is static, because local states depend only on Activeclass type, and
 * not on the rebec instances.
 * If state is smaller than 8 bytes(sizeof (long)), no hashing is used.
 * @param currentValues
 * @return
 */

$reactiveClassDeclaration.getName()::${reactiveClassDeclaration.getName()}(byte myID, char* myName, byte creatorID)
	:ActiveclassAutomaton (myID, myName)
{

    stateSize = STATE_SIZE;
    int i;
	maxQueueLength = $maxQueueLength;
	maxParamQueueLength = $maxParamSize;
    messageQueue = new byte[$maxQueueLength];
	memset (messageQueue, 0, sizeof (byte)*$maxQueueLength);
    senderQueue  = new byte[$maxQueueLength];
	memset (senderQueue,  0, sizeof (byte)*$maxQueueLength);
    paramQueue = new byte*[$maxQueueLength];
    memset (paramQueue,  0, sizeof (byte)*$maxQueueLength);
    #if($maxParamSize != 0)
        for (i = 0; i < $maxQueueLength; i++) {
            paramQueue[i] = new byte[$maxParamSize];
            memset (paramQueue[i],  0, sizeof (byte)* ($maxParamSize));
        }
    #end

    messageNames = new char *[$reactiveClassDeclaration.getMsgsrvs().size() + 1];
	messageNames[0] = "Empty";

    #set ($cnt = 1)
    #foreach ($methodDeclaration in $reactiveClassDeclaration.getMsgsrvs())
        messageNames[$cnt] = "$methodDeclaration.getName().toUpperCase()";
        #set ($cnt = $cnt + 1)
    #end

    #if($reactiveClassDeclaration.getStatevars())
    	#set($statevarsSize = $STATE_SIZE - $maxQueueLength * (2 + $maxParamSize))
        byte emptyData[$statevarsSize];
        memset(emptyData, 0, sizeof (byte) * $statevarsSize);
        i = 0;
        #retrieveListFromArray ("emptyData" "i" $TypesAnalysisUtilities.convertToFormalParameterDeclaration($reactiveClassDeclaration.getStatevars()) false "_ref_")
    #end

	queueTail = 0;


	/* initializing local varibles is not necessary. Proper care must be taken in ClaimAut
	   to check whether this rebec is already initialized (the state number of the initial
	   state is remembered). */

	// initialize hash table
	if (table == (byte**)0xFFFFFFFF) {	// avoid reinitialization
		table = new byte* [1 << hashmapSize];
        memset (table, 0, sizeof(byte*)*(1 << hashmapSize));
	}
}

$reactiveClassName::~${reactiveClassName} (){
	delete [] messageNames;
	delete [] messageQueue;
	delete [] senderQueue;
}


int $reactiveClassName::consumedMemory() {
    return STATE_SIZE * count;
}
/*
void $reactiveClassName::printState(long state, ostream &out) {
    unmarshal(state);

    out << "<rebec reactive-class=\"$reactiveClassName\" name=\"" << myName << "\">"  <<  endl;
    out << "<queue>" << endl;
    int cnt;
    for (cnt = 0; cnt < $maxQueueLength && messageQueue[cnt]; cnt++) {
        out << "<message name=\"" << messageNames[messageQueue[cnt]] << "\">" << endl;
        out << "<sender>";
        out << (senderQueue[cnt] == INITIAL_SENDER ? "null" : rebecs[senderQueue[cnt]]->myName);
        out << "</sender>" << endl;

        out << "<parameters>" << endl;


        #foreach ($methodDeclaration in $reactiveClassDeclaration.getClassBodyDeclaration().getMethodDeclaration())

            if(!strcmp("$methodDeclaration.getName().toUpperCase()", messageNames[messageQueue[cnt]])) {
                int i = 0;
                #set($parameters = false)
                #set($parameters = $methodDeclaration.getFormalParameterDeclaration().getNormalParameterDeclaration())
                #if ($parameters)
                    #retrieveListFromArray("paramQueue[cnt]" "i" $parameters true "_ref_" "param")
                    #printState($parameters "_ref_" "param")
                #end
            }
        #end

        out << "</parameters>" << endl;
        out << "</message>" << endl;
    }
    out << "</queue>" << endl;

    out << "<state-vars>" << endl;
    #if($reactiveClassDeclaration.getClassBodyDeclaration().getStateVarsDeclaration().getLocalVariableDeclaration())
        #printState($reactiveClassDeclaration.getClassBodyDeclaration().getStateVarsDeclaration().getLocalVariableDeclaration() "_ref_" "state-var")
    #end
    out << "</state-vars>" << endl;
    out << "</rebec>" << endl;
}

// Prints the values of local variables and queue elements at the given state
void $reactiveClassName::printGraphvizState(ostream &out) {

    out << "<tr><td rowspan=\"2\">" << myName << "</td>" << endl;
    out << "<td> variables: ";
    int index = 0, cnt;
	#if (!$features.contains("SIMPLIFIED_GVIZ"))
	    #if($reactiveClassDeclaration.getClassBodyDeclaration().getStateVarsDeclaration().getLocalVariableDeclaration())
	        #printDottyState($reactiveClassDeclaration.getClassBodyDeclaration().getStateVarsDeclaration().getLocalVariableDeclaration() "_temp_" "var" false)
	    #end
	#end
    out << "</td>" << endl;
    out << "<td rowspan=\"2\">" << "" << "</td></tr>" << endl;    

    out << "<tr><td> queue: ";
    for (cnt = 0; cnt < $maxQueueLength && messageQueue[cnt]; cnt++)
        out << "(" << messageNames[messageQueue[cnt]] << " ";
    out << "</td></tr>" << endl;
}
*/

void $reactiveClassName::unmarshal(long state) {
        long stateNo = state;
    //Check for the neccesity of this line.
	shift = 0;
	
    byte* currentValues = table[stateNo];
    int index = 0, i, j;

	for (i = 0; i < $maxQueueLength; i++) {
        messageQueue[i] = currentValues[index++];
    }
	
	// Rebec variables are placed in the end - see marshal()
	// No need to unpermute - only in reporting a stack the trace must be unpermuted
	for (i = 0; i < $maxQueueLength; i++) {
        senderQueue[i] = currentValues[index++];
    }
    
	// TODO: separate rebec parameters and move to the end
	#if($maxParamSize != 0)
        for (i = 0; i < $maxQueueLength; i++) {
            for (j = 0; j < $maxParamSize; j++) {
                paramQueue[i][j] = currentValues[index++];
            }
        }
    #end

	// TODO: separate rebec variables and move to the end
    #retrieveListFromArray ("currentValues" "index" $TypesAnalysisUtilities.convertToFormalParameterDeclaration($reactiveClassDeclaration.getStatevars()) false "_ref_")
}

long $reactiveClassName::marshal() {
    int i,j;
	byte currentValues[STATE_SIZE];
	memset (currentValues,  0, sizeof(byte) * STATE_SIZE);
	marshalIndex = 0;

	for (i = shift; i < $maxQueueLength; i++) {
        currentValues[marshalIndex++] = messageQueue[i];
    }

    if (shift) {
        currentValues[marshalIndex++] = 0;
    }
	// TODO: separate rebec vars and params and move them here and marshalRebecVars()
	for (i = shift; i < $maxQueueLength; i++) {
        currentValues[marshalIndex++] = senderQueue[i];
    }

    if (shift) {
        currentValues[marshalIndex++] = 0;
    }

	#if($maxParamSize != 0)
        for (i = shift; i < $maxQueueLength; i++) {
            for (j = 0; j < $maxParamSize; j++) {
                currentValues[marshalIndex++] = paramQueue[i][j];
            }
        }
        if (shift) {
            for (j = 0; j < $maxParamSize; j++) {
                currentValues[marshalIndex++] = 0;
            }
        }
    #end

    #putListToArray ("currentValues" "marshalIndex" $TypesAnalysisUtilities.convertToFormalParameterDeclaration($reactiveClassDeclaration.getStatevars()) "_ref_")

    return storeLocalState(currentValues);
}

void $reactiveClassName::exportStateInXML(ostream &out, string tab) {
	out << tab << "<rebec name=\"" << myName << "\">" << endl;
	exportStateVariablesInXML(out, tab + "\t");
	exportQueueContentInXML(out, tab + "\t");	
	out << tab << "</rebec>" << endl;
}

void $reactiveClassName::exportStateVariablesInXML(ostream &out, string tab) {
	out << tab << "<statevariables>" << endl;
    #foreach($fieldDec in $reactiveClassDeclaration.getStatevars())
        #foreach($variableDec in $fieldDec.getVariableDeclarators())
	        #set($name = $variableDec.getVariableName())
	        #set($refName = "_ref_" + $name)
	        #set($type = $fieldDec.getType())
	    	out << tab << '\t' << "<variable name=\"$name\" type=\"$TypesUtilities.getTypeName($type)\">" <<  
	    		$TypesAnalysisUtilities.getVaribleValue($refName, $type) << "</variable>" << endl;
		#end
	#end
	out << tab << "</statevariables>" << endl;
}

#set ($cnt = 1)
#foreach ($methodDeclaration in $reactiveClassDeclaration.getMsgsrvs())
\#define $methodDeclaration.getName().toUpperCase() $cnt
#set ($cnt = $cnt + 1)
#end
void $reactiveClassName::exportStateQueueContentInXML(ostream &out, string tab) {
	out << tab << "<queue>" << endl;
    for (int cnt < 0; cnt < maxQueueLength && messageQueue[cnt] != 0; cnt++) {
        switch (messageQueue[cnt]) {
	        #foreach ($methodDeclaration in $reactiveClassDeclaration.getMsgsrvs())
            case $methodDeclaration.getName().toUpperCase():
                int i = 0;
                #retrieveListFromArray("paramQueue[cnt]" "i" $methodDeclaration.getFormalParameters() true "_ref_")
                out << tab << '\t' << "<message sender=\"" << rebecs[sender[cnt]]->getName() 
                	<< "\">" << $methodDeclaration.getName() << "(";
                #foreach ($paramDeclaration in $methodDeclaration.getFormalParameters())
                	#set($paramVarName = "_ref_" + $paramDeclaration.getName())
                	<< $TypesAnalysisUtilities.getVaribleValue($paramVarName, $paramDeclaration.getType())
                	#if ($foreach.count < $methodDeclaration.getFormalParameters().size())
					<< ", "
					#end
                #end
                << ") </message>" << endl;
                break;
	        #end
    	}
    }        
	out << tab << "</queue>" << endl;	
}

#parse("/vtl/corerebeca/RebecClassBody.vm")

