#*In the name of Allah*#

\#include "Bodere.h"

#if ($features.contains("SIMULATE"))
#ifdef SIMULATE
\#include <sys/types.h>
\#include <sys/socket.h>

\#include <netinet/in.h>
\#include <unistd.h>
\#include <iostream>
\#include <sstream>
\#include <string>

\#define MAX_MSG 100
\#define LINE_ARRAY_SIZE (MAX_MSG+1)

using namespace std;
#endif
#end

#ifdef CADP
    extern fstream log;
#endif

#ifdef VERBOSE
	extern long collision;	// global state collisions - "extern" in HashMap.cpp
#endif

// REBEC_COUNT + 1: Because of global variables.
extern long sys [REBEC_COUNT];


// the PUSH macro is used in BFS, therefore assigning -1 to rebec & flag

// We know that system state is the first element of State
\#define getSystemPointer(x) ((long*)(x))

#if ($features.contains("DISTRIBUTED_BFS"))
\#define makeMessage(sender, host, message) ((sender << 14) + (host << 7) + message)
//\#define makeMessage(sender, host, message) ((sender * 10000) + (host * 100) + message)
#end
    
\#define UNDEFINED 0
\#define NEW_STATE 1
\#define HEAP_OVERFLOW 4


int totalC = 0;

extern boolean qOverflow;		// set by ActiveclassAutomaton descendants - "extern" in AcAut.cpp
extern boolean qOverflowEnable;	// whether to break/continue search upon qOverflow
extern boolean deadlockEnable;	// whether to detect/ignore deadlocks
extern int numberOfReachedState;	// counting number of reached states (stored in 'storage')
extern int numberOfTrans;	// counting number of transitions
extern ActiveclassAutomaton** rebecs;	// system model
extern int maxDepth, depth, maxReached;// depth in manual stack

list<BackwardBFSState>* waiting = new list<BackwardBFSState>;
list<BackwardBFSState> outgoingWaiting;

BFSState *b_store (BFSState *parent, long claim, byte &result, int level){
	BFSState *st;
    numberOfTrans++;
    marshalRebecs(sys);	// sys is the output - marshals only data vers, and not rebec/scalar vars
	result = NEW_STATE;
	if (bfsStorage->exists (sys, claim)) {
		st = bfsStorage->getState();
		result = ~NEW_STATE;
		if (st->level == parent->level + 1) {
			ParentRef *newParent = new ParentRef;
			newParent->parent = parent;
			newParent->next = st->parent;
			st->parent = newParent;
		}
	}
	else {
		st = bfsStorage->put(sys, claim, level);	//create the new State
		if (st == NULL) {
		    result = HEAP_OVERFLOW;
		    return NULL;
		}
		st->parent = new ParentRef;
		st->parent->parent = parent;
		st->parent->next = NULL;
        numberOfReachedState++;
        #ifdef CADP
		    st->stateID = numberOfReachedState;
        #endif
	}
	return st;
}

void boderePrintReport(BFSState *deadlockState, int result, long time, ostream &out) {
    out << "<model-checking-report>" << endl;
    out << "<system-info>" << endl;
    out << "<total-spend-time>" << time << "</total-spend-time>" << endl;
    out << "<reached-states>" << numberOfReachedState << "</reached-states>" << endl;
    out << "<reached-transitions>" << numberOfTrans << "</reached-transitions>" << endl;
    int i;
    out << "<consumed-mem>";
    int totalMem = 0;
    for (i=0; i<REBEC_COUNT; i++)
    totalMem += rebecs[i]->consumedMemory();
    totalMem += sizeof(BFSState) * numberOfReachedState;
    out << totalMem;
    out << "</consumed-mem>" << endl;
    #ifdef VERBOSE
        out << "<global-state-collisions-occured>" << endl;
        out << collision << endl;
        out << "</global-state-collisions-occured>" << endl;
        out << "<local-states>" << endl;
        for (i=0; i<REBEC_COUNT; i++)
            rebecs[i]->report(out);
        out << "</local-states>" << endl;
    #endif

    out  <<  "</system-info>"  <<  endl;
    out  <<  "<checked-property>"  <<  endl;
    out  <<  "<type>"  <<  userSelectedPropertyType  <<  "</type>"  <<  endl;
    out  <<  "<name>"  <<  (userSelectedPropertyName == null ? "System default deadlock" : userSelectedPropertyName)  <<  "</name>"  <<  endl;
    out  <<  "<result>"  <<  resultMessage(result)  <<  "</result>"  <<  endl;
    out  <<  "<algorithm>BFS</algorithm>"  <<  endl;
    out  <<  "</checked-property>"  <<  endl;
    out << "<options>" << endl;
    out << "<option>Bodere 2.0</option>" << endl;
    out << "</options>" << endl;

    if (result != SATISFIED) {
        out  <<  "<counter-example-trace>"  <<  endl;
        int loopID = -1;
        int counter = 0;
		do {

            out  <<  "<system-state id=\""  <<  counter  <<  "\">"  <<  endl;

            long *rebecsState = getSystemPointer(deadlockState);
            //for (i=0; i<REBEC_COUNT; i++)
            //    rebecs[i]->printState (rebecsState[i], out);

            //out  <<  "</next-system-state>"  <<  endl;
            out  <<  "</system-state>"  <<  endl;


			//out << deadlockState->level << endl;
			ParentRef *parent = deadlockState->parent;
			if (!parent)
				break;
			else
				do{
					if (((BFSState*)(parent->parent))->level < deadlockState->level) {
						deadlockState = (BFSState*)(parent->parent);
						break;
					}
					parent = parent->next;
				} while (true);
			counter++;
		} while (true);
        out  <<  "</counter-example-trace>"  <<  endl;
    }
    out  <<  "</model-checking-report>"  <<  endl;
}


void bodere(char *propertyName, ostream &out, bool dottyFormat) {

    list<BFSState*> *currentLevelQueue = new list<BFSState*>;
    list<BFSState*> *nextLevelQueue = new list<BFSState*>;
	#if ($features.contains("SIMULATE"))
	#ifdef SIMULATE
	  int listenSocket, connectSocket, i;
	  unsigned short int listenPort = 2000;
	  socklen_t clientAddressLength;
	  struct sockaddr_in clientAddress, serverAddress;
	  char line[LINE_ARRAY_SIZE];

	  // Create socket for listening for client connection requests.
	  listenSocket = socket(AF_INET, SOCK_STREAM, 0);
	  if (listenSocket < 0) {
		cerr << "cannot create listen socket";
		exit(1);
	  }
	  serverAddress.sin_family = AF_INET;
	  serverAddress.sin_addr.s_addr = htonl(INADDR_ANY);
	  serverAddress.sin_port = htons(listenPort);

	  if (bind(listenSocket,
			   (struct sockaddr *) &serverAddress,
			   sizeof(serverAddress)) < 0) {
		cerr << "cannot bind socket";
		exit(1);
	  }

	  listen(listenSocket, 5);
	#endif
	#end

    int propertySelector = -1;
    if(propertyName == NULL);
    #foreach ($claimGraphName in $ltlSpecifications.keySet())
        else if(!strcmp(propertyName, "$claimGraphName")) {
            propertySelector = __propertyName_$claimGraphName;
        }
    #end
        else {
    		string message;
		    message = "LTL property \"";
	    	message += propertyName;
    		message += "\" does not exists";
            printError((char*)(message.c_str()), out);
            exit (0);
        }
    int claim = 0;
    switch(propertySelector) {
    #foreach ($claimGraphName in $ltlSpecifications.keySet())
        case __propertyName_$claimGraphName:
        #set ($claimGraph = $ltlSpecifications.get($claimGraphName))
        claim = $claimGraph.getInit().getIntAttribute("_id");
        break;
    #end
    }

	bfsStorage = new BFSHashMap(out);
	initialize(sys);

    int modelCheckingresult = SATISFIED;
    time_t seconds;
    seconds = time (NULL);

	bool isAlive = true;
	bool currentIsEmpty = false;
    byte result;
    int level = 0;
	BFSState* current = b_store (NULL, 0, result, level);
	if (result == NEW_STATE)
		currentLevelQueue->push_back(current);

#if ($features.contains("SIMULATE"))
#ifdef SIMULATE

	clientAddressLength = sizeof(clientAddress);
				connectSocket = accept(listenSocket,(struct sockaddr *) &clientAddress,&clientAddressLength);
				if (connectSocket < 0) {
				  cerr << "cannot accept connection ";
				  return;
				}
	ostringstream kRebecsOstr;
	  for (int r = 0; r < REBEC_COUNT; r++) {
		char* RebecName = rebecs[r]->getName();
		kRebecsOstr << RebecName << "+";
	  }

	  for (int r = 0; r < REBEC_COUNT; r++) {
		int kRebecCount = sizeof(rebecs[r]->known);
		kRebecsOstr << "R";
		for(int k=0; k<kRebecCount; k++)
		{
			if((int)rebecs[r]->known[k]== 255) break;
			kRebecsOstr << (int)rebecs[r]->known[k] << "-";
		}
	  }
		string kRebecsMsg = kRebecsOstr.str();
		cout << "kRebecsMsg:  " << kRebecsMsg << endl;

				ostringstream nstr2;
				nstr2 << kRebecsMsg.size();;
				string kMsgSize = nstr2.str();
				cout << "kMsgSize: " << kMsgSize << endl;
				char* dkMsgSize = new char[kMsgSize.size()];
				strcpy (dkMsgSize, kMsgSize.c_str());
				write(connectSocket, dkMsgSize, 4);

				char* dkRebecsMsg = new char[kRebecsMsg.size()+1];
				strcpy (dkRebecsMsg, kRebecsMsg.c_str());
				write(connectSocket, dkRebecsMsg, strlen(dkRebecsMsg));

				cout << "  connected to some where!!";// << inet_ntoa(clientAddress.sin_addr);
				cout << ":" << ntohs(clientAddress.sin_port) << "\n";
				close(connectSocket);
#endif
#end
	int modelCheckingLevel = 1;
	while (isAlive) {
		currentIsEmpty = currentLevelQueue->empty();
		cout << "<!-- Exploring level " << modelCheckingLevel++ << ", contains " << currentLevelQueue->size() << " states. -->" << endl;
#ifdef DEBUG
    cout << "[bodere][brfore level \"while\"]" << endl;
#endif
		while(currentLevelQueue->size() != 0) {

			current = currentLevelQueue->back();
			currentLevelQueue->pop_back();
            unmarshalRebecs(getSystemPointer(current));
            int deadlock = true;
        #if ($features.contains("SIMULATE"))    
        #ifdef SIMULATE
            string ARebecsMsg;
            int numOfActiveRebecs = 0;
            int activeRebecs[REBEC_COUNT];
            int selectedRebec;
            char* data;
            ostringstream stateOstr, rebecsOstr;
        #endif
        #end
            for (int r = 0; r < REBEC_COUNT; r++) {
#ifdef DEBUG
                cout << "[bodere][in active rebecs search \"for\"]" << endl;
#endif
        #if ($features.contains("SIMULATE"))
        #ifdef SIMULATE
                rebecs[r]->printState (getSystemPointer(current)[r], stateOstr);
                if (rebecs[r]->messageQueue[0]) {
                    activeRebecs[numOfActiveRebecs] = r;
                    numOfActiveRebecs++;
                }
            }
            stateOstr << endl;

            stateOstr << "Choose the next Rebec to be executed:" << endl;

            for(int a=0; a<numOfActiveRebecs; a++){
                rebecsOstr << activeRebecs[a];
                rebecsOstr << "-";
                cout << "R" << activeRebecs[a] << " ";
            }

            cout << endl;
            string StateMsg = stateOstr.str();
            ARebecsMsg = rebecsOstr.str();
            string::size_type length = StateMsg.size();

                cout << "Waiting for TCP connection on port " << listenPort << " ...\n";

                clientAddressLength = sizeof(clientAddress);
                connectSocket = accept(listenSocket,(struct sockaddr *) &clientAddress,&clientAddressLength);
                if (connectSocket < 0) {
                  cerr << "cannot accept connection ";
                  return;
                }

                cout << "  connected to some where!" ;//<< inet_ntoa(clientAddress.sin_addr);
                cout << ":" << ntohs(clientAddress.sin_port) << "\n";

                ostringstream nstr;
                nstr << length;
                string MsgSize = nstr.str();
                cout << "MsgSize: " << MsgSize << endl;
                char* dMsgSize = new char[MsgSize.size()+1];
                strcpy (dMsgSize, MsgSize.c_str());
                write(connectSocket, dMsgSize, 4);

                char* dStateMsg = new char[StateMsg.size()+1];
                strcpy (dStateMsg, StateMsg.c_str());
                write(connectSocket, dStateMsg, strlen(dStateMsg));

                length = ARebecsMsg.size();
                ostringstream rnstr;
                rnstr << length;
                string rMsgSize = rnstr.str();
                char* rdMsgSize = new char[rMsgSize.size()+1];
                strcpy (rdMsgSize, rMsgSize.c_str());
                write(connectSocket, rdMsgSize, 4);

                char* dARebecsMsg = new char[ARebecsMsg.size()+1];
                strcpy (dARebecsMsg , ARebecsMsg.c_str());
                write(connectSocket, dARebecsMsg , strlen(dARebecsMsg));
                close(connectSocket);

                clientAddressLength = sizeof(clientAddress);
                connectSocket = accept(listenSocket,(struct sockaddr *) &clientAddress,&clientAddressLength);
                if (connectSocket < 0) {
                    cerr << "cannot accept connection ";
                    return;
                }

                read(connectSocket, line, MAX_MSG-1);
                selectedRebec = atoi(line);
                cout << selectedRebec << " selected" << endl;

                close(connectSocket);
                if(selectedRebec<0) {
                    close(listenSocket);
                    exit(0);
                }
        \#else
                if (!rebecs[r]->messageQueue[0])
                    continue;
        #endif
		#else
                if (!rebecs[r]->messageQueue[0])
                    continue;
		#end
		
                deadlock = false;
                byte nonDetTrans;
                do {
                #ifdef SIMULATE
                    nonDetTrans = rebecs[selectedRebec]->execute(NULL);
                \#else
                    nonDetTrans = rebecs[r]->execute(NULL);
                #endif

                    if (nonDetTrans == -2) {
                        //todo heap overflow.
                    }
                long int claimNonDetTrans = 0;
					do {
#ifdef DEBUG
                        cout << "[bodere][in claim automata \"do\"]" << endl;
#endif
						int claim = 0;//getNextClaimState(current->claim, claimNonDetTrans, propertySelector);
						BFSState *newState = b_store (current, claim, result, current->level + 1);
						if (result & NEW_STATE) {
							nextLevelQueue->push_back(newState);
						} else {
							if (current->level - newState->level > 0) {
								#if ($features.contains("SIMULATE"))
								#ifdef SIMULATE
									clientAddressLength = sizeof(clientAddress);
									connectSocket = accept(listenSocket,(struct sockaddr *) &clientAddress,&clientAddressLength);
									if (connectSocket < 0) {
									  cerr << "cannot accept connection ";
									  return;
									}

									string T = "terminate";
									char* terminate = new char[T.size()+1];
									strcpy (terminate, T.c_str());
									cout << "sent  "<< T << endl;
									write(connectSocket, terminate, strlen(terminate));

									close(connectSocket);
								#endif
								#end

								BackwardBFSState state;
								state.current = current;
								state.target = newState;

								state.depth = current->level - newState->level;
								waiting->push_back(state);
							}
						}
					} while (claimNonDetTrans);
				
				#if ($features.contains("SIMULATE"))
				#ifdef SIMULATE
					if (selectedRebec < REBEC_COUNT - 1)
						unmarshalRebecs(getSystemPointer(current));
				\#else
					if (r < REBEC_COUNT - 1)
						unmarshalRebecs(getSystemPointer(current));
				#endif
				#else
					if (r < REBEC_COUNT - 1)
						unmarshalRebecs(getSystemPointer(current));
				#end
                } while (nonDetTrans > 0);
		#ifndef SIMULATE
			}
		#endif
			if (deadlock) {
				modelCheckingresult = DEADLOCK;
				break;
			}
		}

		list<BFSState*> *temp = currentLevelQueue;
		currentLevelQueue = nextLevelQueue;
		nextLevelQueue = temp;
        isAlive = !currentLevelQueue->empty();

#ifdef DEBUG
        cout << "[bodere][next level datas are swapped with current level, backward search starts]" << endl;
#endif
		bool searchAlive = true;
		list<BackwardBFSState>* nextRoundWaiting = new list<BackwardBFSState>;
		int cnt = 0;
		#if ($features.contains("SIMULATE"))
		#ifdef SIMULATE
        	int lim = 7;
        #endif
        #end
		while (searchAlive 
		#if ($features.contains("SIMULATE"))
		#ifdef SIMULATE
			&& lim
		#endif
		#end	
			) {
#ifdef DEBUG
        cout << "[bodere][backward search starts]" << endl;
#endif
			while (!waiting->empty()) {
#ifdef DEBUG
                cout << "[bodere][beginning of backward search \"while\"]" << endl;
#endif
				BackwardBFSState state = waiting->back();
				waiting->pop_back();
				if (state.depth == 0) {
				    continue;
					/*if (state.targetHostId != currentId || state.target != state.current)
						continue;
					else {
						continue;
					}*/
				}
				BFSState *currentSearchingState = (BFSState *)state.current;
				ParentRef *p = currentSearchingState->parent;
				while (p) {
#ifdef DEBUG
                    cout << "[bodere][start analysis of nodes parents]" << endl;
#endif
					BackwardBFSState newState;
					newState.current = p->parent
                        #if ($features.contains("DISTRIBUTED_BFS"))
                        #ifdef DISTRIBUTED_BFS
                            .parentRef
                        #endif
                        #end
                    ;
					newState.depth = state.depth - 1;
					nextRoundWaiting->push_back(newState);
					p = p->next;
				}
			}

#ifdef DEBUG
            cout << "[bodere][level synchronization complete]" << endl;
#endif
			list<BackwardBFSState>* tempWaiting = nextRoundWaiting;
			nextRoundWaiting = waiting;
			waiting = tempWaiting;
            searchAlive = !waiting->empty();
			#if ($features.contains("SIMULATE"))
			#ifdef SIMULATE
			    lim--;
		    #endif
		    #end
		}

		level++;
	}

    if (dottyFormat && modelCheckingresult != SATISFIED  && printCounterExample) {
        //printReport2(claim, 0, numberOfReachedState, modelCheckingresult, time(NULL) - seconds, out);
    } else {
        boderePrintReport(current, modelCheckingresult, time(NULL) - seconds, out);
    }


#ifdef CADP
    log.seekp(0);
    log  <<  "des (0,"  <<  numberOfTrans  <<  ","  <<  numberOfReachedState  <<  ")";
    log.close();
#endif

}
