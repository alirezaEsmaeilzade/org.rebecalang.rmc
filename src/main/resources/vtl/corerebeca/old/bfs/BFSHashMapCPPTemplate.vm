#*In the name of Allah*#

\#include "BFSHashMap.h"

/*
The equality of two states depends only on "sys" and "claim" elements.
This function is used so that one state is never stored twice.
*/
boolean BFSState::equals(long *sys, long claim){
    boolean cEq = (claim == this->claim);
    boolean sEq = !memcmp(sys, this, sizeof(long) * REBEC_COUNT);
    return cEq && sEq;
}

boolean BFSState::equals(BFSState *bfsState){
    return this->claim == bfsState->claim
        && !memcmp(bfsState->rebsIndex, this->rebsIndex, sizeof(long) * REBEC_COUNT);
}

//-----------------------------------------------------------------------
// HashMap: Global state space
//-----------------------------------------------------------------------

BFSHashMap::BFSHashMap(int hashmapSize, ostream &outStream) : out(outStream){
	this->hashmapSize = hashmapSize;
    table = new BFSState* [1 << hashmapSize];

    if(table == NULL) {
        throw Exception("Not enough memory for allocating state space hash table.");
    }

    memset (table, 0, (1 << hashmapSize)*sizeof(BFSState*));
}

BFSHashMap::~BFSHashMap () {	//never called
    delete [] table;
}

 /*
  * The hash function is taken from SPIN, which is based on
  * the public domain hash function from Bob Jenkins, 1996.
  * see: http://www.burtleburtle.net/bob/
  * It is changed to fit the data structures.
  */

unsigned int BFSHashMap::hashCode(void *v, unsigned long length, unsigned int mask) {
    unsigned long a, b, c, len = length;

    byte *k = (byte*)v;
    a = b = 0x9e3779b9;
    c = 0;
    while (len >= 3)
    {	a += k[0];
        b += k[1];
        c += k[2];
        mix(a,b,c);
        k += 3; len -= 3;
    }
    c += length;
    switch (len) {
        case 2: b+=k[1];
        case 1: a+=k[0];
    }
    mix(a,b,c);
    return c & mask;
}

/*
Check if a state identified by "sys" and "claim" is already stored.
*/
boolean BFSHashMap::exists (long* sys,
    long claim) {

    hashValue = hashCode(sys, (sizeof(sys[0]) * REBEC_COUNT), (1 << hashmapSize)-1);
    current = table[hashValue];
    if (current == null) {
        #ifdef DEBUG_2
    		out << "State does not exist in hash table." << endl;
   		#endif
    	return false;
    }
    while (current){	// use "buckets" for collision handling
        if (current->equals(sys, claim)) {
  	        #ifdef DEBUG_2
	    		out << "State exists in one bucket of hash table. Going for checking the value of claim." << endl;
	   		#endif        
        	return current->claim == claim;
        }
        current = current->next;
    }
    #ifdef DEBUG_2
		out << "State does not exist in hash table (search in a filled bucket)." << endl;
	#endif
    return false;
}

/*
After we make sure the state identified by "sys" and "claim" is not
already stored (with exists()), this function is called to store the
state.
This function sets no flags for the given state, because in different
situations (like BFS) different flags must be set.
*/
BFSState* BFSHashMap::put (long* sys, long claim, int level){
	// only called after exists(), so hashValue is already calculated properly
    current = table[hashValue];
    #ifdef VERBOSE
	    if (current) collision++;	// count the number of collisions
    #endif
    BFSState *prev = null;
    while (current){	// move to the end of bucket
        prev = current;
        current = current->next;	// move in the bucket
    }
    current = new BFSState;
    if(current == NULL)
        return NULL;

	memset (current, 0, sizeof(BFSState));
    for (int i=0; i<REBEC_COUNT; i++)
        current->rebsIndex[i] = sys[i];
    current->claim = claim;
	current->level = level;
    current->next = null;
    if (prev)
        prev->next = current;
    else
        table[hashValue] = current;
	return current;
}

/*
Both exists() and put() point "current" to the last state referenced.
*/
BFSState* BFSHashMap::getState(){
    return current;
}
