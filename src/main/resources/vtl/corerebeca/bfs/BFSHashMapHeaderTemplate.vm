#*In the name of Allah*#

#ifndef __BODERE_HASHMAP_H_
\#define __BODERE_HASHMAP_H_

\#include "Types.h"
\#include "Config.h"
\#include <stdlib.h>
\#include <ostream>
\#include <fstream>


using namespace std;

\#define mix(a,b,c) \
{  a -= b; a -= c; a ^= (c >> 13); \
   b -= c; b -= a; b ^= (a << 8);  \
   c -= a; c -= b; c ^= (b >> 13); \
   a -= b; a -= c; a ^= (c >> 12); \
   b -= c; b -= a; b ^= (a << 16); \
   c -= a; c -= b; c ^= (b >> 5);  \
   a -= b; a -= c; a ^= (c >> 3);  \
   b -= c; b -= a; b ^= (a << 10); \
   c -= a; c -= b; c ^= (b >> 15); \
}

struct ParentRef;

struct BFSState {
    long rebsIndex[REBEC_COUNT];
    long claim;
    #ifdef ENABLE_STATE_ID
        long stateID;
    #endif

    #ifdef GRAPH_VIZ
        void printGraphvizState(ofstream &out);
    #endif
        BFSState *next;	// in bucket
        ParentRef *parent;

        int level;

        virtual boolean equals (long *sys, long claim);
        virtual boolean equals (BFSState *current);

};

class BFSHashMap {
	protected:
        BFSState** table;
        long hashValue;
        BFSState* current;
        ostream &out;
        int hashmapSize;
    public:
        static unsigned int hashCode (void*, unsigned long, unsigned int);
        BFSHashMap (int hashmapSize, ostream &out);
        virtual ~BFSHashMap ();
        virtual boolean exists (long* sys, long claim);
        virtual BFSState* put (long*, long, int level);
        virtual BFSState* getState();
};

struct ParentRef {
    void * parent;
    byte activeRebecId;
    byte messageInQueueIndex;
    ParentRef *next;
};

#endif
