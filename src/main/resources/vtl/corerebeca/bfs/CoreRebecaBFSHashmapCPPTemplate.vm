#*In the name of Allah*#

\#include "CoreRebecaBFSHashmap.h"
/*
template<class T> boolean BFSState<T>::equals(BFSState<T>& bfsState){
    return !memcmp(bfsState.rebsIndex, this->rebsIndex, sizeof(T) * REBEC_COUNT);
}

//-----------------------------------------------------------------------
// HashMap: Global state space
//-----------------------------------------------------------------------
/*
template<class T> CoreRebecaBFSHashmap<T>::CoreRebecaBFSHashmap(int hashmapSize, ostream &outStream) : out(outStream){
	this->hashmapSize = hashmapSize;
    table = new list<T*> [1 << hashmapSize];

    if(table == NULL) {
        throw Exception("Not enough memory for allocating state space hash table.");
    }

	numberOfElements = 0;
    //memset (table, 0, (1 << hashmapSize)*sizeof(BFSState<T>*));
}

template<class T> CoreRebecaBFSHashmap<T>::~CoreRebecaBFSHashmap () {	//never called
    delete [] table;
}

template<class T> unsigned int CoreRebecaBFSHashmap<T>::hashCode(void *v, unsigned long length, unsigned int mask) {
    unsigned long a, b, c, len = length;

    byte *k = (byte*)v;
    a = b = 0x9e3779b9;
    c = 0;
    while (len >= 3)
    {	a += k[0];
        b += k[1];
        c += k[2];
        mix(a,b,c);
        k += 3; len -= 3;
    }
    c += length;
    switch (len) {
        case 2: b+=k[1];
        case 1: a+=k[0];
    }
    mix(a,b,c);
    return c & mask;
}
/*
template<class T> unsigned int CoreRebecaBFSHashmap<T>::hashCode(T& state) {
	hashCode(state.rebsIndex, (sizeof(state.rebsIndex[0]) * REBEC_COUNT), (1 << hashmapSize)-1);
}

template<class T> T* CoreRebecaBFSHashmap<T>::exists (T& state) {

    hashValue = getHashCode(state);
    list<T> &bucket = table[hashValue];
    for (typename list<T*>::iterator it = bucket.begin(); it != bucket.end(); it++) {
        if ((*it)->equals(state)) {
  	        #ifdef DEBUG_2
	    		out << "State exists in one bucket of hash table. Going for checking the value of claim." << endl;
	   		#endif        
        	return *it;
        }
    }
    #ifdef DEBUG_2
		out << "State does not exist in hash table." << endl;
	#endif
	return NULL;
}

template<class T> T* CoreRebecaBFSHashmap<T>::put (T& state, T* parent, int executedRebecIndex, int level){
	// only called after exists(), so hashValue is already calculated properly
    list<T> &bucket = table[hashValue];

    T* current = new T(state);
    if(current == NULL)
        throw Exception("Not enough memory to insert new item in the hash table of state space.");

    typename BFSState<T>::ParentReference pr;
    pr.parent = parent;
    pr.executedRebecIndex = executedRebecIndex;
    current->parents.push_back(pr);

	bucket.push_back(current);
	numberOfElements++;
	return current;
}
*/