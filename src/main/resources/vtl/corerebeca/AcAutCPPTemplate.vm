                                                #*In the name of Allah*#

\#include "AcAut.h"
\#include <stdio.h>
\#include <string.h>

#if ($namespace)
using namespace $namespace;
#end

const byte ActiveclassAutomaton::coeff[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};

ActiveclassAutomaton::ActiveclassAutomaton(byte myID, char* myName, int hashmapSize) {
    this->myID = myID;
	this->myName = myName;
	this->hashmapSize = hashmapSize;
	shift = 0;
}

ActiveclassAutomaton::~ActiveclassAutomaton (){
}

char* ActiveclassAutomaton::activeAction(){
	return messageNames[messageQueue[0]];
}

unsigned int ActiveclassAutomaton::hashCode(byte *v) {	// depends on SSIZE
	unsigned long c;
    if (stateSize < 8) { // 8 is sizeof(c)=sizeof(long)
	    c = * (unsigned long*) v;
    }
    else {
        unsigned long a, b, len, length;

        length = len = stateSize;
        byte *k = v;
        a = b = 0x9e3779b9;
        c = 0;
        while (len >= 3)
        {	a += k[0];
            b += k[1];
            c += k[2];
            mix(a,b,c);
            k += 3; len -= 3;
        }
        c += length;
        // If len equals to 2, both cases, 2 and 1, are executed
        // If len equals to 1, just the second case (1) will be executed
        switch (len) {
            case 2: b+=k[1];
            case 1: a+=k[0];
        }
        mix(a,b,c);
    }
	return c & ((1 << hashmapSize)-1);
}


void ActiveclassAutomaton::enqueue(byte* queue, byte message){
	while (queueTail < maxQueueLength - 1 && queue[queueTail]) {
        queueTail++;
    }
	if (queue[queueTail]) {
		throw Exception("Queue overflow");
	}
	else {
		queue[queueTail] = message;
	}
}

void ActiveclassAutomaton::enqueue(byte **queue, byte *message, int size){
    for (int cnt = 0; cnt < size; cnt++) {
        queue[queueTail][cnt] = message[cnt];
    }
}

char* ActiveclassAutomaton::getName() {
    return myName;
}

void ActiveclassAutomaton::_synchmethod_assertion(/*string message*/byte id, boolean condition) {
	if (!condition)
		throw AssertionFailedException(/*message*/ "assertion failed");
}

void ActiveclassAutomaton::setRebecs(ActiveclassAutomaton **rebecs) {
    this->rebecs = rebecs;
}

