                                    #*In the name of Allah*#

// location counters (values stored in messageQueue[0])
/* There can be more than one location counter for each msgsrv when we
   want to have non-atomic message servers.
   Notice that values 0 and 1 are reserved for EMPTY and INITIAL, respectively.*/
#set ($cnt = 1)
#foreach ($methodDeclaration in $reactiveClassDeclaration.getMsgsrvs())
\#define $methodDeclaration.getName().toUpperCase() $cnt
#set ($cnt = $cnt + 1)
#end


// knownrebecs (those to whom message can be sent)
// the following format allows to use them as variables --> the ID of the rebec
\#define _ref_sender (rebecs[senderQueue[0]])
\#define _ref_self (($reactiveClassName*)rebecs[myID])
#set($cnt = 1)
#foreach($fieldDec in $reactiveClassDeclaration.getKnownRebecs())
    #foreach ($varDec in $fieldDec.getVariableDeclarators())
    	\#define _ref_$varDec.getVariableName() (($statementTranslator.getTypeName($fieldDec.getType())*)rebecs[known[$cnt]])
	    #set($cnt = $cnt + 1)
    #end
#end
    
#foreach($knownRebec in $reactiveClassDeclaration.getKnownRebecs().getKnownRebecDeclaration())
    \#define _ref_$knownRebec.getName() (known[$cnt])
    #set($cnt = $cnt + 1)
#end

// The following variables are shared among all instances (static variables)
byte** $reactiveClassName::table = (byte**)0xFFFFFFFF;// hash table for storing local states of this reactive class

int $reactiveClassName::count = 0;		// number of local states stored in this reactive class


long $reactiveClassName::storeLocalState(byte* currentValues) {
	// get Number by State
    unsigned long h, stateNum;
	h = stateNum = hashCode(currentValues);
next:
	if (table[stateNum] == null) {
    count++;
		table[stateNum] = new byte [STATE_SIZE];
		if (table[stateNum] == NULL) {
		    //return -3;
            throw -3;
		}
		memcpy (table[stateNum], currentValues, sizeof(byte)*STATE_SIZE);
        return stateNum;
	}
	if (!memcmp (table[stateNum], currentValues, sizeof(byte)*STATE_SIZE)) {
        return stateNum;
    }

	// Collision has occured
	// Check next slot (linear probing) for collision handling
	stateNum = (stateNum < (1 << hashmapSize)-1)? stateNum+1 : 0; // may wrap arond
	if (stateNum == h) {
        throw Exception("Hash table of ${reactiveClassName} is full.");
	}
	goto next;	// collision
}


int $reactiveClassName::getStateSize() {
	return STATE_SIZE;
}

char* $reactiveClassName::getClassName() {
    return "$reactiveClassName";
}

#foreach ($methodDeclaration in $reactiveClassDeclaration.getMsgsrvs())
    void $reactiveClassName::_msg_$methodDeclaration.getName() (byte senderId
        #putParameters($methodDeclaration.getFormalParameters() true)
    ){
        queueTail = 0;
        enqueue(messageQueue, $methodDeclaration.getName().toUpperCase());
        enqueue(senderQueue, senderId);
        #set($msgSrv = $reactiveClass.item($msgSrvCounter))

        #if ($maxParamSize != 0)
            int index = 0;
            byte paramsValues[$maxParamSize];
            memset(paramsValues, 0, $maxParamSize);
            #putListToArray ("paramsValues" "index" $methodDeclaration.getFormalParameters() "_ref_")
            enqueue(paramQueue, paramsValues, $maxParamSize);
        #end
}
#end

//---------------------------------------------------------
/**
  Checks which action of this rebec is enabled, and executes it. Actions are the
  same as the location-counter defined at the beginning of this file.
  In the case of non-atomic message servers, a location-counter may point to the
  middle of a message server.
  If this action leads to more than one transition (non_det), this method executes
  only one of these transitions. With the help of some static variables, consecutive
  calls to this method execute different transitions caused by this action.
  Local variables must be properly valuated before any call to this method (see marshal()).

  returns: >0 : there are more possible next states (non-det transitions).
		   =0 : no more non_det transitions
		   -1 : no enabled action (empty queue)
		   -2 : Local hash table is full - immediate termination of search
 */
long $reactiveClassName::execute(long* rebs) {

    switch (messageQueue[0]) {

        #foreach ($methodDeclaration in $reactiveClassDeclaration.getMsgsrvs())
            case $methodDeclaration.getName().toUpperCase():
                {
                    int i = 0;
                    #retrieveListFromArray("paramQueue[0]" "i" $methodDeclaration.getFormalParameters() true "_ref_")
                    return msgsrv${methodDeclaration.getName()}(rebs
                        #putParametersValues($methodDeclaration.getFormalParameters() true)
                    );
                }
        #end
    }
    return -1;   // if queue empty, we have no transitions
}

#foreach ($methodDeclaration in $reactiveClassDeclaration.getConstructors())
    long $reactiveClassName::constructor$reactiveClassName (byte creatorId 
    	#putParameters($methodDeclaration.getFormalParameters() true)
    ) {
    	$statementTranslator.convertConstructorBody($methodDeclaration)
	}
#end

#foreach ($methodDeclaration in $reactiveClassDeclaration.getSynchMethods())
    $statementTranslator.getTypeName($synchMethodDeclaration.getType()) $reactiveClassName::_synchmethod_$methodDeclaration.getName() (
    	#putParameters($methodDeclaration.getFormalParameters() false)
    ) {
    	$statementTranslator.convertSynchMethodBody($methodDeclaration)
	}
#end


#foreach ($methodDeclaration in $reactiveClassDeclaration.getMsgsrvs())
    long $reactiveClassName::msgsrv$methodDeclaration.getName() (long* rebs
    	#putParameters($methodDeclaration.getFormalParameters() true)
    ) {
    	$statementTranslator.convertMsgsrvBody($methodDeclaration)
}
#end

#ifdef DEBUG
void $reactiveClassName::printStateContent(long stateNo, ostream &out) {
	out << myName << "=>[";
	byte* currentValues = table[stateNo];
	for (int cnt = 0; cnt < STATE_SIZE; cnt++)
		out << (int)currentValues[cnt] << ", ";
	out << "]";
}
#endif
