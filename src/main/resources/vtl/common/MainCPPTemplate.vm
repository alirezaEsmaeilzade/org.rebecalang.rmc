                                          #*In the name of Allah*#
#parse ("$mainPatch")

\#include "Types.h"
\#include "Config.h"

\#include "CommandLineParser.h"

#mainMacroPutAdditionalIncludes()

\#include <signal.h>
\#include <fstream>
\#include <iostream>
\#include <stdlib.h>

using namespace std;

#foreach ($fieldDeclaration in $envVariables) 
	 $translator.translate($fieldDeclaration, "") 
#end

#mainMacroPutInstanceReference()

void segmentationFaultHandler(int signum) {
	analyzer->segmentationFault();
	exit(0);
}

#ifdef PROGRESS_REPORT
\#include <thread> 
\#include <chrono> 
ostream *progressReportStream;
boolean continueReportProgress;
void progressReport() {
	while(continueReportProgress) {
		analyzer->progressReport(*progressReportStream);
	    std::this_thread::sleep_for(std::chrono::milliseconds(2000));
	}
}
#endif

int BOOLEAN_SIZE, BYTE_SIZE, SHORT_SIZE, INT_SIZE, FLOAT_SIZE, DOUBLE_SIZE, REACTIVE_CLASS_SIZE;
int main(int argc, char* argv[]) {

	BOOLEAN_SIZE = sizeof(boolean);
	BYTE_SIZE = sizeof(byte);
	SHORT_SIZE = sizeof(short);
	INT_SIZE = sizeof(int);
	FLOAT_SIZE = sizeof(float);
	DOUBLE_SIZE = sizeof(double);
	REACTIVE_CLASS_SIZE = sizeof(void*);
	
	signal(SIGSEGV, segmentationFaultHandler);

	CommandLineParser parser;
	parser.addOption('h', "help", "Print this message.");
	parser.addOption('s', "hashmapSize", "Set the size of the hashmap to \"2^value\" (default size is 20 and the value should be bigger that 20).", "value");
	parser.addOption('o', "exportResult", "Exporting the model checking result in file \"fileName\".", "fileName");
	#ifdef PROGRESS_REPORT
		parser.addOption('g', "progress", "Report progress in file \"fileName\".", "fileName");
	#endif
	
	#mainMacroPutAdditionalCommandOptions()
	    
	try {
		parser.parse(argc, argv);
	} catch (Exception e) {
		cout << e.getMessage() << endl;
		parser.printHelp();
		exit(0);
	}
	if (parser.hasOption('h')) {
		parser.printHelp();
		exit(0);
	}
	
    int hashmapSize = 24;
	ostream *result = &cout;

	if (parser.hasOption('s')) {
		int newSize = atoi(parser.getOptionValue('s').c_str());
		hashmapSize = newSize > hashmapSize ? newSize : hashmapSize;
	}
	if (parser.hasOption('o')) {
		result = new ofstream(parser.getOptionValue('o').c_str(), ofstream::out|ofstream::trunc);
	}
	#ifdef PROGRESS_REPORT
		if (parser.hasOption('g')) {
			progressReportStream = new ofstream(parser.getOptionValue('g').c_str(), ofstream::out|ofstream::trunc);
		}
	#endif

	for (list<string>::iterator it = parser.getEnvironmentVariables().begin(); it != parser.getEnvironmentVariables().end(); ++it) {
		string envVar = *it;
		int index = envVar.find("=");
		if (index == string::npos || index == 0 || index == envVar.length() - 1)
			continue;
		string name = envVar.substr(0, index);
		string value = envVar.substr(index + 1, envVar.length());
		#foreach ($fieldDeclaration in $envVariables) 
			#foreach ($variableDeclarator in $fieldDeclaration.getVariableDeclarators())
				
				if (name == "$variableDeclarator.getVariableName()")				
					try {
						#if($TypesUtilities.getTypeName($fieldDeclaration.getType()) == "int")
							_ref_$variableDeclarator.getVariableName() = stoi(value);
						#elseif($TypesUtilities.getTypeName($fieldDeclaration.getType()) == "byte")
							_ref_$variableDeclarator.getVariableName() = stoi(value);
						#elseif($TypesUtilities.getTypeName($fieldDeclaration.getType()) == "short")
							_ref_$variableDeclarator.getVariableName() = stoi(value);
						#elseif($TypesUtilities.getTypeName($fieldDeclaration.getType()) == "float")
							_ref_$variableDeclarator.getVariableName() = stof(value);
						#elseif($TypesUtilities.getTypeName($fieldDeclaration.getType()) == "double")
							_ref_$variableDeclarator.getVariableName() = stod(value);
						#else
							cout << "<!--Dynamic value assignment only supports numerical types not " <<
								"\"$TypesUtilities.getTypeName($fieldDeclaration.getType())\" type of variable" << 
								" \"$variableDeclarator.getVariableName()\".-->" << endl;
						#end						
					} catch(std::invalid_argument e) {
						cout << "<!--Invalid value for variable \"$variableDeclarator.getVariableName()\".-->" << endl;
					} catch(std::out_of_range e) {
						cout << "<!--Value out of range for variable \"$variableDeclarator.getVariableName()\".-->" << endl;
					}

					
			#end 
		#end
    }
	#mainMacroPutAnalyzerAllocation()
	
    if (parser.hasOption('o')) {
        ((ofstream*)result)->close();
    }
    return 0;
}
