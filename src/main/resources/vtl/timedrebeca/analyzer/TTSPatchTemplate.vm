#*In the name of Allah*#

#set($patchRelatedTo = "timedRebecaTTS")

#macro (timedRebecaTTSAdditionalSignatures $noParam)

	virtual void storeInitialState();
	virtual long executeRebec(int rebecId);
	virtual void exportProgressOfTimeTransition(OpenBorderNode &source,
		OpenBorderNode &destination, TIME_TYPE time, TIME_TYPE shift, ostream &outStream);
		
	int numberOfDelayStates;
	int numberOfDelayTransitions;
#end

#macro (timedRebecaTTSAdditionalBodies $noParam)

void TimedModelChecker::printCounterExampleTransition(TimedBFSState* parent, TimedBFSState* child) {

	OpenBorderNode parentNode, childNode;
	
	childNode.state = child;
	childNode.stateActiveBundleNumber = 0;
	
	parentNode.state = parent;
	parentNode.stateActiveBundleNumber = 0;
	
	if (child->parents.front().executedRebecIndex == -1) {
		TIME_TYPE diff = rebecs[0]->_ref_now;
		
		unmarshalRebecs(child->rebsIndex, 
    		child->shiftTimes[child->parents.front().timeBundleIndex].shift);
    	diff = rebecs[0]->_ref_now - diff;
    		
		exportProgressOfTimeTransition(parentNode, childNode, diff, 0, out);
	} else {
		int rebecId = child->parents.front().executedRebecIndex;
		string label = "";
		if (rebecs[rebecId]->__pc != -1) {
			label += "tau=>";
		}
		label += rebecs[rebecId]->activeAction();
		exportTransition(parentNode, childNode, rebecs[rebecId]->getName(), label, rebecs[rebecId]->getNow(), 0, out);
	}
}

void TimedModelChecker::printModelCheckingOptions() {
    out << "\t<option>TTS</option>" << std::endl;
}

void TimedModelChecker::exportModelCheckingReportExtraDetails() {
	out << "<extra-details>" << endl;
	out << "\t<timed-states>" << numberOfDelayStates << "</timed-states>" << endl;
	out << "\t<timed-transitions>" << numberOfDelayTransitions << "</timed-transitions>" << endl;
	out << "</extra-details>" << endl;
}

void TimedModelChecker::storeInitialState() {

    byte result;
    TIME_TYPE shift;

	current = storeRecentlyCreatedState (result, shift, NULL, 0, 0);
	current.state->stateID = 1;

    #ifdef EXPORT_STATE_SPACE
	    statespace << "<transitionsystem>" << endl;
	    exportState(current, statespace);
    #endif

    #ifdef DEBUG
    	out << "The initial state is stored in the state space storage successfully." << endl;
    #endif

	numberOfDelayStates = 0;
	numberOfDelayTransitions = 0;

    current.currentTime = 0;
	
	//In this case, the first transition is a "progress of time" transition.
	int nextRebecTime = MAX_TIME;
	for (int r2 = 0; r2 < REBEC_COUNT; r2++) {
		if (rebecs[r2]->messageQueue[0]) {
	        TIME_TYPE rebecNextMessageTime = max(rebecs[r2]->getNow(), rebecs[r2]->executionTime[0]);
	        nextRebecTime = min(rebecNextMessageTime ,nextRebecTime);
	    }
	}
    if (nextRebecTime != 0) {
        for (int r2 = 0; r2 < REBEC_COUNT; r2++) {
            rebecs[r2]->setNow(nextRebecTime);
        }
    	OpenBorderNode newState2 = storeRecentlyCreatedState(result, shift, current.state,
    		current.stateActiveBundleNumber, 0);
        newState2.currentTime = nextRebecTime;

		#ifdef ENABLE_STATE_ID
		newState2.state->stateID = 2;
		#endif
		
	    #ifdef EXPORT_STATE_SPACE
	    exportState(current, statespace);
	    exportProgressOfTimeTransition(current, newState2, nextRebecTime, 0, statespace);
	    #endif
		openBorderQueue.push(newState2);
		numberOfDelayTransitions++;
		numberOfDelayStates++;
    } else {
    	openBorderQueue.push(current);
    }
}


void TimedModelChecker::doTimedModelChecking(string userSelectedPropertyName, string userSelectedPropertyType) {
    byte result;
    TIME_TYPE shift;

	storeInitialState();
    
    #ifdef DEBUG
        out << "Before start state space generation \"while\" loop (The initial state is stored)." << endl;
    #endif
    while(!openBorderQueue.empty()) {

		TIME_TYPE currentTime = prepareWithNewState();
        int deadlock = true;
	    #ifdef DEBUG
	        out << "State is unmarshalled and try to find an enabled rebec." << endl;
	    #endif
	    
        for (int r = 0; r < REBEC_COUNT; r++) {
        	TIME_TYPE executionTime;
            int numberOfAlternatives = 1;
        	if (rebecs[r]->__pc == -1) {
	            if (!rebecs[r]->messageQueue[0])
	                continue;
	            if ((max(rebecs[r]->getNow(), rebecs[r]->executionTime[0])) > currentTime) {
	                continue;
                }
                executionTime = (max(rebecs[r]->getNow(), rebecs[r]->executionTime[0]));
                numberOfAlternatives = getNumberOfAlternatives(r, executionTime);
        	} else {
        		if (rebecs[r]->__res != currentTime)
        			continue;
			}
            byte nonDetTrans;
            for(int alternativesCounter = 0; alternativesCounter < numberOfAlternatives; alternativesCounter++) {
	            do {
					changeOrder(r, alternativesCounter);
					if (rebecs[r]->__pc == -1) {
					    if (rebecs[r]->deadline[0] < currentTime) {
					        throw DeadlineMissedException("Deadline missed");
					    }
					}
					nonDetTrans = executeRebec(r);
					unmarshalRebecs(current.state->rebsIndex, current.state->shiftTimes[current.stateActiveBundleNumber].shift);
	                currentTime = current.currentTime;
	            } while (nonDetTrans > 0);
            }
        }
    }
}

long TimedModelChecker::executeRebec(int rebecId) {
	byte nonDetTrans;
    byte result;
    TIME_TYPE shift;

	#ifdef EXPORT_STATE_SPACE
	    char* actionName = rebecs[rebecId]->activeAction();
	    string prefix="";
	#endif
	#ifdef DEBUG
	    out << "Enabled rebec is found. Try to excute message \"" << rebecs[rebecId]->getName() << "::" << rebecs[rebecId]->activeAction() << "\"."<< endl;
	#endif
	if (rebecs[rebecId]->__pc != -1) {
		#ifdef EXPORT_STATE_SPACE
			prefix = "tau=>";
		#endif
		//currentTime = rebecs[rebecId]->__res;
	}
	
	TIME_TYPE currentTime = rebecs[rebecId]->getNow();//(currentTime);
	nonDetTrans = rebecs[rebecId]->execute();
	#ifdef DEBUG
	    out << "Message \"" << rebecs[rebecId]->getName() << "::" << rebecs[rebecId]->activeAction() << "\" is executed " 
	    	<< "and the return value is \"" << (int)nonDetTrans << "\"." << endl;
	#endif
	
	int nextRebecTime = MAX_TIME;
	for (int r2 = 0; r2 < REBEC_COUNT; r2++) {
		int index = (rebecId == r2 ? 1 : 0 );
		if (rebecs[r2]->__pc != -1) {
			nextRebecTime = min(rebecs[r2]->__res, nextRebecTime);
		} else if (rebecs[r2]->messageQueue[index]) {
	        TIME_TYPE rebecNextMessageTime = max(rebecs[r2]->getNow(), rebecs[r2]->executionTime[index]);
	        nextRebecTime = min(rebecNextMessageTime ,nextRebecTime);
	    }
	}
	
	OpenBorderNode newState = storeRecentlyCreatedState(result, shift, current.state, current.stateActiveBundleNumber, rebecId);
	
	if (nextRebecTime == MAX_TIME) {
		current = newState;
	    throw DeadlockException("Deadlock");
	}
	
	if (result & NEW_STATE) {
	    newState.currentTime = nextRebecTime;
	
	    #ifdef ENABLE_STATE_ID
	        newState.state->stateID = AbstractTimedRebecaAnalyzer::numberOfStates;
		#endif
		
	    #ifdef EXPORT_STATE_SPACE
		    exportState(newState, statespace);
	    #endif
	
	    if (currentTime != nextRebecTime) {
	        for (int r2 = 0; r2 < REBEC_COUNT; r2++) {
	            rebecs[r2]->setNow(nextRebecTime);
	        }
	        TIME_TYPE shift2 = 0;
	    	OpenBorderNode newState2 = storeRecentlyCreatedState(result, shift2, newState.state, current.stateActiveBundleNumber, -1);
	    	if (result & NEW_STATE) {
	    		numberOfDelayStates++;
	            newState2.currentTime = nextRebecTime;
	
			    #ifdef ENABLE_STATE_ID
			    newState2.state->stateID = AbstractTimedRebecaAnalyzer::numberOfStates;
			    #endif
			    
			    #ifdef EXPORT_STATE_SPACE
			    exportState(newState2, statespace);
			    #endif
			    
	    		openBorderQueue.push(newState2);
	    	}
		    #ifdef EXPORT_STATE_SPACE
		    exportProgressOfTimeTransition(newState, newState2, (nextRebecTime - currentTime), shift2, statespace);
		    #endif
		    numberOfDelayTransitions++;
	    } else {
	    	openBorderQueue.push(newState);
	    }
	}
	#ifdef EXPORT_STATE_SPACE
	string label = prefix;
	label += actionName;
	exportTransition(current, newState, rebecs[rebecId]->getName(), label, currentTime, shift, statespace);
	#endif
	return nonDetTrans;
}


void TimedModelChecker::exportProgressOfTimeTransition(OpenBorderNode &source,
	OpenBorderNode &destination, TIME_TYPE time, TIME_TYPE shift, ostream &outStream) {
    
    outStream << "<transition source=\"" << source.state->stateID << "_" << 
		(int)source.stateActiveBundleNumber << 
    	"\" destination=\"" << destination.state->stateID << "_" << 
    	(int)destination.stateActiveBundleNumber << "\" shift=\"" << (int) shift <<
		"\"> <time value=\"" << (int)time << "\"/></transition>" << endl;
}

#end